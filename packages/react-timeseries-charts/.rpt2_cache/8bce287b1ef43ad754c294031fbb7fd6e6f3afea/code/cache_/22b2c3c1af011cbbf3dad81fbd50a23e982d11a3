{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as _ from \"lodash\";\r\nimport * as moment from \"moment\";\r\nimport * as React from \"react\";\r\nimport { timeFormat } from \"d3-time-format\";\r\nimport \"moment-duration-format\";\r\nimport { InfoBox } from \"./info\";\r\nimport { defaultTimeMarkerStyle } from \"./style\";\r\nvar TimeMarker = (function (_super) {\r\n    tslib_1.__extends(TimeMarker, _super);\r\n    function TimeMarker() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    TimeMarker.prototype.renderLine = function (posx) {\r\n        var style = this.props.style;\r\n        return React.createElement(\"line\", { style: style.line, x1: posx, y1: 0, x2: posx, y2: this.props.height });\r\n    };\r\n    TimeMarker.prototype.renderTimeMarker = function (d) {\r\n        var style = this.props.style;\r\n        var dateStr = \"\" + d;\r\n        if (this.props.timeFormat === \"day\") {\r\n            var formatter = timeFormat(\"%d\");\r\n            dateStr = formatter(d);\r\n        }\r\n        else if (this.props.timeFormat === \"month\") {\r\n            var formatter = timeFormat(\"%B\");\r\n            dateStr = formatter(d);\r\n        }\r\n        else if (this.props.timeFormat === \"year\") {\r\n            var formatter = timeFormat(\"%Y\");\r\n            dateStr = formatter(d);\r\n        }\r\n        else if (this.props.timeFormat === \"relative\") {\r\n            dateStr = moment.duration(+d).format();\r\n        }\r\n        else if (_.isString(this.props.timeFormat)) {\r\n            var formatter = timeFormat(this.props.timeFormat);\r\n            dateStr = formatter(d);\r\n        }\r\n        else if (_.isFunction(this.props.timeFormat)) {\r\n            var fn = this.props.timeFormat;\r\n            dateStr = fn(d);\r\n        }\r\n        return (React.createElement(\"text\", { x: 0, y: 0, dy: \"1.2em\", style: style.text }, dateStr));\r\n    };\r\n    TimeMarker.prototype.renderInfoBox = function (posx) {\r\n        var infoBox;\r\n        var align = \"left\";\r\n        var _a = this.props, time = _a.time, style = _a.style, info = _a.info, infoWidth = _a.infoWidth, infoHeight = _a.infoHeight, showTime = _a.showTime;\r\n        var infoBoxProps = {\r\n            align: align,\r\n            style: {\r\n                text: style.text,\r\n                box: style.box\r\n            },\r\n            width: this.props.infoWidth,\r\n            height: this.props.infoHeight\r\n        };\r\n        if (info) {\r\n            if (info) {\r\n                infoBox = React.createElement(InfoBox, tslib_1.__assign({}, infoBoxProps, { info: info }));\r\n            }\r\n            if (posx + 10 + infoWidth < this.props.width - 50) {\r\n                return (React.createElement(\"g\", { transform: \"translate(\" + (posx + 10) + \",\" + 5 + \")\" },\r\n                    showTime ? this.renderTimeMarker(time) : null,\r\n                    React.createElement(\"g\", { transform: \"translate(0,\" + (showTime ? 20 : 0) + \")\" }, infoBox)));\r\n            }\r\n            return (React.createElement(\"g\", { transform: \"translate(\" + (posx - infoWidth - 10) + \",\" + 5 + \")\" },\r\n                showTime ? this.renderTimeMarker(time) : null,\r\n                React.createElement(\"g\", { transform: \"translate(0,\" + (showTime ? 20 : 0) + \")\" }, infoBox)));\r\n        }\r\n        return React.createElement(\"g\", null);\r\n    };\r\n    TimeMarker.prototype.render = function () {\r\n        var posx = this.props.timeScale(this.props.time);\r\n        if (posx) {\r\n            return (React.createElement(\"g\", null,\r\n                this.props.showLine ? this.renderLine(posx) : null,\r\n                this.props.showInfoBox ? this.renderInfoBox(posx) : null));\r\n        }\r\n        return null;\r\n    };\r\n    TimeMarker.defaultProps = {\r\n        showInfoBox: true,\r\n        showLine: true,\r\n        showTime: true,\r\n        style: defaultTimeMarkerStyle,\r\n        infoWidth: 90,\r\n        infoHeight: 25\r\n    };\r\n    return TimeMarker;\r\n}(React.Component));\r\nexport { TimeMarker };\r\n","map":{"mappings":""},"dts":{"name":"/Users/pmurphy/code/react-timeseries-charts/packages/react-timeseries-charts/TimeMarker.d.ts","text":"/// <reference types=\"react\" />\r\nimport * as React from \"react\";\r\nimport \"moment-duration-format\";\r\nimport { ChartProps } from \"./charts\";\r\nimport { TimeMarkerStyle } from \"./style\";\r\nimport { LabelValueList } from \"./types\";\r\nexport declare type StringPair = [string, string];\r\nexport declare type TimeFormatCallback = (d: Date) => string;\r\nexport declare type TimeMarkerProps = ChartProps & {\r\n    time: Date;\r\n    style?: Partial<TimeMarkerStyle>;\r\n    timeFormat?: string | TimeFormatCallback;\r\n    info?: LabelValueList | string;\r\n    infoHeight?: number;\r\n    infoWidth?: number;\r\n    showInfoBox?: boolean;\r\n    showLine?: boolean;\r\n    showTime?: boolean;\r\n};\r\nexport declare class TimeMarker extends React.Component<TimeMarkerProps> {\r\n    static defaultProps: Partial<TimeMarkerProps>;\r\n    renderLine(posx: number): JSX.Element;\r\n    renderTimeMarker(d: Date): JSX.Element;\r\n    renderInfoBox(posx: number): JSX.Element;\r\n    render(): JSX.Element;\r\n}\r\n"}}
