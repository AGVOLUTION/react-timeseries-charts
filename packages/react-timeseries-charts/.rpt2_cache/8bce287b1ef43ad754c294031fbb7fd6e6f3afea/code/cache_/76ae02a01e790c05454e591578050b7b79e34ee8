{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as _ from \"lodash\";\r\nimport * as React from \"react\";\r\nimport Flexbox from \"flexbox-react\";\r\nimport { LegendItem, LegendItemType } from \"./LegendItem\";\r\nimport { Styler } from \"./styler\";\r\nimport { defaultLegendCategoryStyle as defaultStyle } from \"./style\";\r\nvar Legend = (function (_super) {\r\n    tslib_1.__extends(Legend, _super);\r\n    function Legend() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Legend.prototype.providedStyle = function (category, type) {\r\n        if (this.props.style) {\r\n            if (this.props.style instanceof Styler) {\r\n                return this.props.style.legendStyle(category.key, type);\r\n            }\r\n            else if (_.isObject(this.props.style)) {\r\n                var s = this.props.style;\r\n                return s[category.key];\r\n            }\r\n            else {\r\n                var fn = this.props.style;\r\n                return fn(category.key);\r\n            }\r\n        }\r\n    };\r\n    Legend.prototype.styleMode = function (category) {\r\n        var isHighlighted = this.props.highlight && category.key === this.props.highlight;\r\n        var isSelected = this.props.selection && category.key === this.props.selection;\r\n        var isDisabled = category.disabled;\r\n        var mode = \"normal\";\r\n        if (this.props.selection) {\r\n            if (isSelected) {\r\n                mode = \"selected\";\r\n            }\r\n            else if (isHighlighted) {\r\n                mode = \"highlighted\";\r\n            }\r\n            else {\r\n                mode = \"muted\";\r\n            }\r\n        }\r\n        else if (isHighlighted) {\r\n            mode = \"highlighted\";\r\n        }\r\n        else if (isDisabled) {\r\n            mode = \"muted\";\r\n        }\r\n        return mode;\r\n    };\r\n    Legend.prototype.symbolStyle = function (category) {\r\n        var styleMap = this.providedStyle(category, this.props.type);\r\n        var styleMode = this.styleMode(category);\r\n        return _.merge(defaultStyle[styleMode], styleMap.symbol[styleMode] ? styleMap.symbol[styleMode] : {});\r\n    };\r\n    Legend.prototype.labelStyle = function (category) {\r\n        var styleMap = this.providedStyle(category, this.props.type);\r\n        var styleMode = this.styleMode(category);\r\n        return _.merge(defaultStyle[styleMode], styleMap.label[styleMode] ? styleMap.label[styleMode] : {});\r\n    };\r\n    Legend.prototype.valueStyle = function (category) {\r\n        var styleMap = this.providedStyle(category, this.props.type);\r\n        var styleMode = this.styleMode(category);\r\n        return _.merge(defaultStyle[styleMode], styleMap.value[styleMode] ? styleMap.value[styleMode] : {});\r\n    };\r\n    Legend.prototype.render = function () {\r\n        var _this = this;\r\n        var _a = this.props, type = _a.type, symbolWidth = _a.symbolWidth, symbolHeight = _a.symbolHeight;\r\n        var items = this.props.categories.map(function (category) {\r\n            var key = category.key, label = category.label, value = category.value;\r\n            var symbolStyle = _this.symbolStyle(category);\r\n            var labelStyle = _this.labelStyle(category);\r\n            var valueStyle = _this.valueStyle(category);\r\n            return (React.createElement(LegendItem, { key: key, type: type, itemKey: key, label: label, value: value, symbolWidth: symbolWidth, symbolHeight: symbolHeight, symbolStyle: symbolStyle, labelStyle: labelStyle, valueStyle: valueStyle, onSelectionChange: _this.props.onSelectionChange, onHighlightChange: _this.props.onHighlightChange }));\r\n        });\r\n        var align = this.props.align === \"left\" ? \"flex-start\" : \"flex-end\";\r\n        return React.createElement(Flexbox, { justifyContent: align }, items);\r\n    };\r\n    Legend.defaultProps = {\r\n        style: {},\r\n        type: LegendItemType.Swatch,\r\n        align: \"left\",\r\n        symbolWidth: 16,\r\n        symbolHeight: 16\r\n    };\r\n    return Legend;\r\n}(React.Component));\r\nexport { Legend };\r\n","map":{"mappings":""},"dts":{"name":"/Users/pmurphy/code/react-timeseries-charts/packages/react-timeseries-charts/Legend.d.ts","text":"/// <reference types=\"react\" />\r\nimport * as React from \"react\";\r\nimport { LegendItemType } from \"./LegendItem\";\r\nimport { Styler } from \"./styler\";\r\nimport { LegendStyle, CategoryStyle, StyleMode } from \"./style\";\r\nexport declare type LegendCategory = {\r\n    key: string;\r\n    label: string;\r\n    value: string;\r\n    disabled?: boolean;\r\n    style?: object;\r\n    labelStyle?: object;\r\n};\r\nexport declare type LegendProps = {\r\n    type?: LegendItemType;\r\n    align?: \"left\" | \"right\";\r\n    style?: LegendStyle | ((column: string) => CategoryStyle) | Styler;\r\n    categories: LegendCategory[];\r\n    symbolWidth?: number;\r\n    symbolHeight?: number;\r\n    highlight?: string;\r\n    selection?: string;\r\n    onSelectionChange?: (...args: any[]) => any;\r\n    onHighlightChange?: (...args: any[]) => any;\r\n};\r\nexport declare class Legend extends React.Component<LegendProps> {\r\n    static defaultProps: Partial<LegendProps>;\r\n    providedStyle(category: LegendCategory, type: LegendItemType): CategoryStyle;\r\n    styleMode(category: LegendCategory): StyleMode;\r\n    symbolStyle(category: LegendCategory): {\r\n        [mode: string]: React.CSSProperties;\r\n        normal: React.CSSProperties;\r\n        highlighted: React.CSSProperties;\r\n        selected: React.CSSProperties;\r\n        muted: React.CSSProperties;\r\n    } & React.CSSProperties;\r\n    labelStyle(category: LegendCategory): {\r\n        [mode: string]: React.CSSProperties;\r\n        normal: React.CSSProperties;\r\n        highlighted: React.CSSProperties;\r\n        selected: React.CSSProperties;\r\n        muted: React.CSSProperties;\r\n    } & React.CSSProperties;\r\n    valueStyle(category: LegendCategory): {\r\n        [mode: string]: React.CSSProperties;\r\n        normal: React.CSSProperties;\r\n        highlighted: React.CSSProperties;\r\n        selected: React.CSSProperties;\r\n        muted: React.CSSProperties;\r\n    } & React.CSSProperties;\r\n    render(): JSX.Element;\r\n}\r\n"}}
