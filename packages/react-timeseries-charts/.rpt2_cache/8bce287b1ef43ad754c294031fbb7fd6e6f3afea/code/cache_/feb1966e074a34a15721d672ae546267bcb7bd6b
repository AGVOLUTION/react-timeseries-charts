{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as _ from \"lodash\";\r\nimport * as React from \"react\";\r\nimport { Event } from \"pondjs\";\r\nvar EventChart = (function (_super) {\r\n    tslib_1.__extends(EventChart, _super);\r\n    function EventChart(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.state = {\r\n            hover: null\r\n        };\r\n        return _this;\r\n    }\r\n    EventChart.prototype.onMouseOver = function (e, event) {\r\n        if (this.props.onMouseOver) {\r\n            this.props.onMouseOver(event);\r\n        }\r\n        this.setState({ hover: event });\r\n    };\r\n    EventChart.prototype.onMouseLeave = function () {\r\n        if (this.props.onMouseLeave) {\r\n            this.props.onMouseLeave(this.state.hover);\r\n        }\r\n        this.setState({ hover: null });\r\n    };\r\n    EventChart.prototype.handleClick = function (e, event) {\r\n        e.stopPropagation();\r\n        if (this.props.onSelectionChange) {\r\n            this.props.onSelectionChange(event);\r\n        }\r\n    };\r\n    EventChart.prototype.render = function () {\r\n        var _this = this;\r\n        var _a = this.props, series = _a.series, textOffsetX = _a.textOffsetX, textOffsetY = _a.textOffsetY, hoverMarkerWidth = _a.hoverMarkerWidth;\r\n        var scale = this.props.timeScale;\r\n        var eventMarkers = [];\r\n        var i = 0;\r\n        series\r\n            .collection()\r\n            .eventList()\r\n            .forEach(function (event) {\r\n            var begin = event.begin();\r\n            var end = event.end();\r\n            var beginPos = scale(begin) >= 0 ? scale(begin) : 0;\r\n            var endPos = scale(end) <= _this.props.width ? scale(end) : _this.props.width;\r\n            var transform = \"translate(\" + beginPos + \",0)\";\r\n            var isHover = _this.state.hover ? Event.is(event, _this.state.hover) : false;\r\n            var state;\r\n            if (isHover) {\r\n                state = \"hover\";\r\n            }\r\n            else {\r\n                state = \"normal\";\r\n            }\r\n            var barNormalStyle = {};\r\n            var barStyle = {};\r\n            if (_this.props.style) {\r\n                barNormalStyle = _this.props.style(event, \"normal\");\r\n                barStyle = _this.props.style(event, state);\r\n            }\r\n            var label = \"\";\r\n            if (_this.props.label) {\r\n                if (_.isString(_this.props.label)) {\r\n                    label = _this.props.label;\r\n                }\r\n                else if (_.isFunction(_this.props.label)) {\r\n                    label = _this.props.label(event);\r\n                }\r\n            }\r\n            var x = _this.props.spacing;\r\n            var y = 0;\r\n            var width = endPos - beginPos - 2 * _this.props.spacing;\r\n            width = width < 0 ? 0 : width;\r\n            var height = _this.props.size;\r\n            var text = null;\r\n            var textStyle = {\r\n                fontSize: 11,\r\n                fontWeight: 100,\r\n                pointerEvents: \"none\",\r\n                fill: \"#444\"\r\n            };\r\n            if (isHover) {\r\n                text = (React.createElement(\"g\", null,\r\n                    React.createElement(\"rect\", { className: \"eventchart-marker\", x: x, y: y, width: hoverMarkerWidth, height: height + 4, style: _.merge(barNormalStyle, { pointerEvents: \"none\" }) }),\r\n                    React.createElement(\"text\", { style: textStyle, x: 8 + textOffsetX, y: 15 + textOffsetY }, label)));\r\n            }\r\n            var marker = (React.createElement(\"g\", { transform: transform, key: i },\r\n                React.createElement(\"rect\", { className: \"eventchart-marker\", x: x, y: y, width: width, height: height, style: barStyle, onClick: function (e) { return _this.handleClick(e, event); }, onMouseLeave: function () { return _this.onMouseLeave(); }, onMouseOver: function (e) { return _this.onMouseOver(e, event); } }),\r\n                text));\r\n            eventMarkers.push(marker);\r\n            i += 1;\r\n        });\r\n        return React.createElement(\"g\", null, eventMarkers);\r\n    };\r\n    EventChart.defaultProps = {\r\n        size: 30,\r\n        spacing: 0,\r\n        textOffsetX: 0,\r\n        textOffsetY: 0,\r\n        hoverMarkerWidth: 5\r\n    };\r\n    return EventChart;\r\n}(React.Component));\r\nexport { EventChart };\r\n","map":{"mappings":""},"dts":{"name":"/Users/pmurphy/code/react-timeseries-charts/packages/react-timeseries-charts/EventChart.d.ts","text":"/// <reference types=\"react\" />\r\nimport * as React from \"react\";\r\nimport { TimeSeries, Event, Key } from \"pondjs\";\r\nimport { ChartProps } from \"./Charts\";\r\nimport { EventChartStyle } from \"./style\";\r\nexport declare type EventChartProps = ChartProps & {\r\n    series: TimeSeries<Key>;\r\n    label?: string | ((...args: any[]) => any);\r\n    size?: number;\r\n    spacing?: number;\r\n    hoverMarkerWidth?: number;\r\n    textOffsetX?: number;\r\n    textOffsetY?: number;\r\n    style?: EventChartStyle;\r\n    onSelectionChange?: (e: Event<Key>) => any;\r\n    onMouseOver?: (e: Event<Key>) => any;\r\n    onMouseLeave?: (b: boolean) => any;\r\n};\r\nexport declare type EventChartState = {\r\n    hover: any;\r\n};\r\nexport declare class EventChart extends React.Component<EventChartProps, EventChartState> {\r\n    static defaultProps: {\r\n        size: number;\r\n        spacing: number;\r\n        textOffsetX: number;\r\n        textOffsetY: number;\r\n        hoverMarkerWidth: number;\r\n    };\r\n    hover: Event<Key>;\r\n    constructor(props: EventChartProps);\r\n    onMouseOver(e: React.MouseEvent<SVGRectElement>, event: Event<Key>): void;\r\n    onMouseLeave(): void;\r\n    handleClick(e: React.MouseEvent<SVGRectElement>, event: Event<Key>): void;\r\n    render(): JSX.Element;\r\n}\r\n"}}
