{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from \"react\";\r\nvar Resizable = (function (_super) {\r\n    tslib_1.__extends(Resizable, _super);\r\n    function Resizable(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.state = { width: 0 };\r\n        return _this;\r\n    }\r\n    Resizable.prototype.componentDidMount = function () {\r\n        var _this = this;\r\n        window.addEventListener(\"resize\", function () { return _this.handleResize(); });\r\n        this.handleResize();\r\n    };\r\n    Resizable.prototype.componentWillUnmount = function () {\r\n        var _this = this;\r\n        window.removeEventListener(\"resize\", function () { return _this.handleResize(); });\r\n    };\r\n    Resizable.prototype.handleResize = function () {\r\n        if (this.container) {\r\n            this.setState({\r\n                width: this.container.offsetWidth\r\n            });\r\n        }\r\n    };\r\n    Resizable.prototype.render = function () {\r\n        var _this = this;\r\n        var child = React.Children.only(this.props.children);\r\n        var childElement = this.state.width\r\n            ? React.cloneElement(child, { width: this.state.width })\r\n            : null;\r\n        return (React.createElement(\"div\", tslib_1.__assign({ ref: function (c) {\r\n                _this.container = c;\r\n            } }, this.props), childElement));\r\n    };\r\n    return Resizable;\r\n}(React.Component));\r\nexport { Resizable };\r\n","map":{"mappings":""},"dts":{"name":"/Users/pmurphy/code/react-timeseries-charts/packages/react-timeseries-charts/Resizable.d.ts","text":"/// <reference types=\"react\" />\r\nimport * as React from \"react\";\r\nexport declare type ResizableProps = {};\r\nexport declare type ResizableState = {\r\n    width: number;\r\n};\r\nexport declare class Resizable extends React.Component<{}, ResizableState> {\r\n    container: HTMLElement;\r\n    constructor(props: ResizableProps);\r\n    componentDidMount(): void;\r\n    componentWillUnmount(): void;\r\n    handleResize(): void;\r\n    render(): JSX.Element;\r\n}\r\n"}}
