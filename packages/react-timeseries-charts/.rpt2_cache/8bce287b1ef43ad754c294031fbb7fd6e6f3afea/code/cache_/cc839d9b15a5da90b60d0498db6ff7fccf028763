{"code":"import * as tslib_1 from \"tslib\";\r\nimport \"array.prototype.fill\";\r\nimport * as _ from \"lodash\";\r\nimport * as React from \"react\";\r\nimport { area, line } from \"d3-shape\";\r\nimport { TimeSeries } from \"pondjs\";\r\nimport { defaultAreaChartStyle as defaultStyle } from \"./style\";\r\nimport { CurveInterpolation } from \"./types\";\r\nimport { scaleAsString } from \"./util\";\r\nimport { Styler } from \"./styler\";\r\nimport curves from \"./curve\";\r\nexport var StyleType;\r\n(function (StyleType) {\r\n    StyleType[\"Line\"] = \"line\";\r\n    StyleType[\"Area\"] = \"area\";\r\n})(StyleType || (StyleType = {}));\r\nvar AreaChart = (function (_super) {\r\n    tslib_1.__extends(AreaChart, _super);\r\n    function AreaChart() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.defaultProps = {\r\n            interpolation: CurveInterpolation.curveLinear,\r\n            columns: {\r\n                up: [],\r\n                down: []\r\n            },\r\n            stack: true\r\n        };\r\n        return _this;\r\n    }\r\n    AreaChart.prototype.shouldComponentUpdate = function (nextProps) {\r\n        var newSeries = nextProps.series;\r\n        var oldSeries = this.props.series;\r\n        var width = nextProps.width;\r\n        var timeScale = nextProps.timeScale;\r\n        var yScale = nextProps.yScale;\r\n        var interpolation = nextProps.interpolation;\r\n        var columns = nextProps.columns;\r\n        var style = nextProps.style;\r\n        var highlight = nextProps.highlight;\r\n        var selection = nextProps.selection;\r\n        var widthChanged = this.props.width !== width;\r\n        var timeScaleChanged = scaleAsString(this.props.timeScale) !== scaleAsString(timeScale);\r\n        var yAxisScaleChanged = this.props.yScale !== yScale;\r\n        var interpolationChanged = this.props.interpolation !== interpolation;\r\n        var columnsChanged = JSON.stringify(this.props.columns) !== JSON.stringify(columns);\r\n        var styleChanged = JSON.stringify(this.props.style) !== JSON.stringify(style);\r\n        var highlightChanged = this.props.highlight !== highlight;\r\n        var selectionChanged = this.props.selection !== selection;\r\n        var seriesChanged = false;\r\n        if (oldSeries.size() !== newSeries.size()) {\r\n            seriesChanged = true;\r\n        }\r\n        else {\r\n            seriesChanged = !TimeSeries.is(oldSeries, newSeries);\r\n        }\r\n        return (seriesChanged ||\r\n            timeScaleChanged ||\r\n            widthChanged ||\r\n            interpolationChanged ||\r\n            columnsChanged ||\r\n            styleChanged ||\r\n            yAxisScaleChanged ||\r\n            highlightChanged ||\r\n            selectionChanged);\r\n    };\r\n    AreaChart.prototype.handleHover = function (e, column) {\r\n        if (this.props.onHighlightChange) {\r\n            this.props.onHighlightChange(column);\r\n        }\r\n    };\r\n    AreaChart.prototype.handleHoverLeave = function () {\r\n        if (this.props.onHighlightChange) {\r\n            this.props.onHighlightChange(null);\r\n        }\r\n    };\r\n    AreaChart.prototype.handleClick = function (e, column) {\r\n        e.stopPropagation();\r\n        if (this.props.onSelectionChange) {\r\n            this.props.onSelectionChange(column);\r\n        }\r\n    };\r\n    AreaChart.prototype.providedAreaStyleMap = function (column) {\r\n        var style = defaultStyle;\r\n        if (this.props.style) {\r\n            if (this.props.style instanceof Styler) {\r\n                style = this.props.style.areaChartStyle()[column];\r\n            }\r\n            else if (_.isObject(this.props.style)) {\r\n                style = this.props.style[column];\r\n            }\r\n            else if (_.isFunction(this.props.style)) {\r\n                style = this.props.style[column];\r\n            }\r\n        }\r\n        return style;\r\n    };\r\n    AreaChart.prototype.style = function (column, type) {\r\n        var style;\r\n        var styleMap = this.providedAreaStyleMap(column);\r\n        var isHighlighted = this.props.highlight && column === this.props.highlight;\r\n        var isSelected = this.props.selection && column === this.props.selection;\r\n        if (!_.has(styleMap, StyleType.Line)) {\r\n            console.error(\"Provided style for AreaChart does not define a style for the outline:\", styleMap, column);\r\n        }\r\n        if (!_.has(styleMap, StyleType.Area)) {\r\n            console.error(\"Provided style for AreaChart does not define a style for the area:\", styleMap);\r\n        }\r\n        if (this.props.selection) {\r\n            if (isSelected) {\r\n                style = _.merge(defaultStyle[type].selected, styleMap[type].selected ? styleMap[type].selected : {});\r\n            }\r\n            else if (isHighlighted) {\r\n                style = _.merge(defaultStyle[type].highlighted, styleMap[type].highlighted ? styleMap[type].highlighted : {});\r\n            }\r\n            else {\r\n                style = _.merge(defaultStyle[type].muted, styleMap[type].muted ? styleMap[type].muted : {});\r\n            }\r\n        }\r\n        else if (isHighlighted) {\r\n            style = _.merge(defaultStyle[type].highlighted, styleMap[type].highlighted ? styleMap[type].highlighted : {});\r\n        }\r\n        else {\r\n            style = _.merge(defaultStyle[type].normal, styleMap[type].normal ? styleMap[type].normal : {});\r\n        }\r\n        return style;\r\n    };\r\n    AreaChart.prototype.pathStyle = function (column) {\r\n        return this.style(column, StyleType.Line);\r\n    };\r\n    AreaChart.prototype.areaStyle = function (column) {\r\n        return this.style(column, StyleType.Area);\r\n    };\r\n    AreaChart.prototype.renderPaths = function (columnList, direction) {\r\n        var _this = this;\r\n        var dir = direction === \"up\" ? 1 : -1;\r\n        var size = this.props.series.size();\r\n        var offsets = new Array(size).fill(0);\r\n        return columnList.map(function (column, i) {\r\n            var style = _this.areaStyle(column);\r\n            var pathStyle = _this.pathStyle(column);\r\n            var data = [];\r\n            for (var j = 0; j < _this.props.series.size(); j += 1) {\r\n                var seriesPoint = _this.props.series.at(j);\r\n                data.push({\r\n                    x0: _this.props.timeScale(seriesPoint.timestamp()),\r\n                    y0: _this.props.yScale(offsets[j]),\r\n                    y1: _this.props.yScale(offsets[j] + dir * seriesPoint.get(column))\r\n                });\r\n                if (_this.props.stack) {\r\n                    offsets[j] += dir * seriesPoint.get(column);\r\n                }\r\n            }\r\n            var areaGenerator = area()\r\n                .curve(curves[_this.props.interpolation])\r\n                .x(function (d) { return d.x0; })\r\n                .y0(function (d) { return d.y0; })\r\n                .y1(function (d) { return d.y1; });\r\n            var areaPath = areaGenerator(data);\r\n            var lineGenerator = line()\r\n                .curve(curves[_this.props.interpolation])\r\n                .x(function (d) { return d.x0; })\r\n                .y(function (d) { return d.y1; });\r\n            var outlinePath = lineGenerator(data);\r\n            return (React.createElement(\"g\", { key: \"area-\" + i },\r\n                React.createElement(\"path\", { d: areaPath, style: style, onClick: function (e) { return _this.handleClick(e, column); }, onMouseLeave: function () { return _this.handleHoverLeave(); }, onMouseMove: function (e) { return _this.handleHover(e, column); } }),\r\n                React.createElement(\"path\", { d: outlinePath, style: pathStyle, onClick: function (e) { return _this.handleClick(e, column); }, onMouseLeave: function () { return _this.handleHoverLeave(); }, onMouseMove: function (e) { return _this.handleHover(e, column); } })));\r\n        });\r\n    };\r\n    AreaChart.prototype.renderAreas = function () {\r\n        var up = this.props.columns.up || [];\r\n        var down = this.props.columns.down || [];\r\n        return (React.createElement(\"g\", null,\r\n            this.renderPaths(up, \"up\"),\r\n            this.renderPaths(down, \"down\")));\r\n    };\r\n    AreaChart.prototype.render = function () {\r\n        return React.createElement(\"g\", null, this.renderAreas());\r\n    };\r\n    return AreaChart;\r\n}(React.Component));\r\nexport { AreaChart };\r\n","map":{"mappings":""},"dts":{"name":"/Users/pmurphy/code/react-timeseries-charts/packages/react-timeseries-charts/AreaChart.d.ts","text":"/// <reference types=\"react\" />\r\nimport \"array.prototype.fill\";\r\nimport * as React from \"react\";\r\nimport { TimeSeries, Key } from \"pondjs\";\r\nimport { AreaChartStyle } from \"./style\";\r\nimport { ChartProps } from \"./Charts\";\r\nimport { CurveInterpolation, AreaChartColumns } from \"./types\";\r\nexport declare enum StyleType {\r\n    Line = \"line\",\r\n    Area = \"area\",\r\n}\r\nexport declare type AreaChartProps = ChartProps & {\r\n    series: TimeSeries<Key>;\r\n    columns: AreaChartColumns;\r\n    style: AreaChartStyle;\r\n    interpolation: CurveInterpolation;\r\n    axis: string;\r\n    stack?: boolean;\r\n    highlight?: string;\r\n    selection?: string;\r\n    onHighlightChange?: (column: string) => any;\r\n    onSelectionChange?: (column: string) => any;\r\n};\r\nexport declare class AreaChart extends React.Component<AreaChartProps> {\r\n    defaultProps: Partial<AreaChartProps>;\r\n    shouldComponentUpdate(nextProps: AreaChartProps): boolean;\r\n    handleHover(e: React.MouseEvent<SVGPathElement>, column: string): void;\r\n    handleHoverLeave(): void;\r\n    handleClick(e: React.MouseEvent<SVGPathElement>, column: string): void;\r\n    providedAreaStyleMap(column: string): {\r\n        line: {\r\n            [mode: string]: React.CSSProperties;\r\n            normal: React.CSSProperties;\r\n            highlighted: React.CSSProperties;\r\n            selected: React.CSSProperties;\r\n            muted: React.CSSProperties;\r\n        };\r\n        area: {\r\n            [mode: string]: React.CSSProperties;\r\n            normal: React.CSSProperties;\r\n            highlighted: React.CSSProperties;\r\n            selected: React.CSSProperties;\r\n            muted: React.CSSProperties;\r\n        };\r\n    };\r\n    style(column: string, type: StyleType): any;\r\n    pathStyle(column: string): any;\r\n    areaStyle(column: string): any;\r\n    renderPaths(columnList: string[], direction: string): JSX.Element[];\r\n    renderAreas(): JSX.Element;\r\n    render(): JSX.Element;\r\n}\r\n"}}
