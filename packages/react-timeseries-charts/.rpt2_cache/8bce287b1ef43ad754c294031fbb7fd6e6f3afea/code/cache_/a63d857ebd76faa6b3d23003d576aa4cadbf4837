{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from \"react\";\r\nimport { timerange, TimeRange } from \"pondjs\";\r\nimport { getElementOffset } from \"./util\";\r\nvar EventHandler = (function (_super) {\r\n    tslib_1.__extends(EventHandler, _super);\r\n    function EventHandler(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.state = {\r\n            isPanning: false,\r\n            initialPanBegin: null,\r\n            initialPanEnd: null,\r\n            initialPanPosition: null\r\n        };\r\n        _this.handleScrollWheel = _this.handleScrollWheel.bind(_this);\r\n        _this.handleMouseDown = _this.handleMouseDown.bind(_this);\r\n        _this.handleMouseUp = _this.handleMouseUp.bind(_this);\r\n        _this.handleMouseOut = _this.handleMouseOut.bind(_this);\r\n        _this.handleMouseMove = _this.handleMouseMove.bind(_this);\r\n        return _this;\r\n    }\r\n    EventHandler.prototype.getOffsetMousePosition = function (e) {\r\n        var offset = getElementOffset(this.eventRect);\r\n        var x = e.pageX - offset.left;\r\n        var y = e.pageY - offset.top;\r\n        return [Math.round(x), Math.round(y)];\r\n    };\r\n    EventHandler.prototype.handleScrollWheel = function (e) {\r\n        if (!this.props.enablePanZoom) {\r\n            return;\r\n        }\r\n        e.preventDefault();\r\n        var SCALE_FACTOR = 0.001;\r\n        var scale = 1 + e.deltaY * SCALE_FACTOR;\r\n        if (scale > 3) {\r\n            scale = 3;\r\n        }\r\n        if (scale < 0.1) {\r\n            scale = 0.1;\r\n        }\r\n        var xy = this.getOffsetMousePosition(e);\r\n        var d = this.props.scale.range()[0];\r\n        var begin = this.props.scale.domain()[0].getTime();\r\n        var end = this.props.scale.domain()[1].getTime();\r\n        var center = this.props.scale.invert(xy[0]).getTime();\r\n        var beginScaled = center - Math.round((center - +begin) * scale);\r\n        var endScaled = center + Math.round((end - +center) * scale);\r\n        var duration = (end - begin) * scale;\r\n        if (this.props.minDuration) {\r\n            var minDuration = Math.round(this.props.minDuration);\r\n            if (duration < this.props.minDuration) {\r\n                beginScaled = center - (center - begin) / (end - begin) * minDuration;\r\n                endScaled = center + (end - center) / (end - begin) * minDuration;\r\n            }\r\n        }\r\n        if (this.props.minTime && this.props.maxTime) {\r\n            var maxDuration = this.props.maxTime.getTime() - this.props.minTime.getTime();\r\n            if (duration > maxDuration) {\r\n                duration = maxDuration;\r\n            }\r\n        }\r\n        if (this.props.minTime && beginScaled < this.props.minTime.getTime()) {\r\n            beginScaled = this.props.minTime.getTime();\r\n            endScaled = beginScaled + duration;\r\n        }\r\n        if (this.props.maxTime && endScaled > this.props.maxTime.getTime()) {\r\n            endScaled = this.props.maxTime.getTime();\r\n            beginScaled = endScaled - duration;\r\n        }\r\n        var newBegin = new Date(beginScaled);\r\n        var newEnd = new Date(endScaled);\r\n        var newTimeRange = timerange(newBegin, newEnd);\r\n        if (this.props.onZoom) {\r\n            this.props.onZoom(newTimeRange);\r\n        }\r\n    };\r\n    EventHandler.prototype.handleMouseDown = function (e) {\r\n        if (!this.props.enablePanZoom) {\r\n            return;\r\n        }\r\n        e.preventDefault();\r\n        var x = e.pageX;\r\n        var y = e.pageY;\r\n        var xy0 = [Math.round(x), Math.round(y)];\r\n        var begin = this.props.scale.domain()[0].getTime();\r\n        var end = this.props.scale.domain()[1].getTime();\r\n        document.addEventListener(\"mouseover\", this.handleMouseMove);\r\n        document.addEventListener(\"mouseup\", this.handleMouseUp);\r\n        this.setState({\r\n            isPanning: true,\r\n            initialPanBegin: begin,\r\n            initialPanEnd: end,\r\n            initialPanPosition: xy0\r\n        });\r\n        return false;\r\n    };\r\n    EventHandler.prototype.handleMouseUp = function (e) {\r\n        if (!this.props.enablePanZoom) {\r\n            return;\r\n        }\r\n        e.stopPropagation();\r\n        document.removeEventListener(\"mouseover\", this.handleMouseMove);\r\n        document.removeEventListener(\"mouseup\", this.handleMouseUp);\r\n        var x = e.pageX;\r\n        if (this.props.onMouseClick &&\r\n            this.state.initialPanPosition &&\r\n            Math.abs(x - this.state.initialPanPosition[0]) < 2) {\r\n            this.props.onMouseClick();\r\n        }\r\n        this.setState({\r\n            isPanning: false,\r\n            initialPanBegin: null,\r\n            initialPanEnd: null,\r\n            initialPanPosition: null\r\n        });\r\n    };\r\n    EventHandler.prototype.handleMouseOut = function (e) {\r\n        e.preventDefault();\r\n        if (this.props.onMouseOut) {\r\n            this.props.onMouseOut();\r\n        }\r\n    };\r\n    EventHandler.prototype.handleMouseMove = function (e) {\r\n        e.preventDefault();\r\n        var x = e.pageX;\r\n        var y = e.pageY;\r\n        var xy = [Math.round(x), Math.round(y)];\r\n        if (this.state.isPanning) {\r\n            var xy0 = this.state.initialPanPosition;\r\n            var timeOffset = this.props.scale.invert(xy[0]).getTime() -\r\n                this.props.scale.invert(xy0[0]).getTime();\r\n            var newBegin = Math.round(this.state.initialPanBegin - timeOffset);\r\n            var newEnd = Math.round(this.state.initialPanEnd - timeOffset);\r\n            var duration = Math.round(this.state.initialPanEnd - this.state.initialPanBegin);\r\n            if (this.props.minTime && newBegin < this.props.minTime.getTime()) {\r\n                newBegin = this.props.minTime.getTime();\r\n                newEnd = newBegin + duration;\r\n            }\r\n            if (this.props.maxTime && newEnd > this.props.maxTime.getTime()) {\r\n                newEnd = this.props.maxTime.getTime();\r\n                newBegin = newEnd - duration;\r\n            }\r\n            var newTimeRange = new TimeRange(newBegin, newEnd);\r\n            if (this.props.onZoom) {\r\n                this.props.onZoom(newTimeRange);\r\n            }\r\n        }\r\n        else if (this.props.onMouseMove) {\r\n            var trackerPosition = this.getOffsetMousePosition(e)[0];\r\n            var time = this.props.scale.invert(trackerPosition);\r\n            if (this.props.onMouseMove) {\r\n                this.props.onMouseMove(time);\r\n            }\r\n        }\r\n    };\r\n    EventHandler.prototype.render = function () {\r\n        var _this = this;\r\n        var cursor = this.state.isPanning ? \"-webkit-grabbing\" : \"default\";\r\n        return (React.createElement(\"g\", { pointerEvents: \"all\", onWheel: function (e) { return _this.handleScrollWheel(e); }, onMouseDown: function (e) { return _this.handleMouseDown(e); }, onMouseUp: function (e) { return _this.handleMouseUp(e); }, onMouseMove: function (e) { return _this.handleMouseMove(e); }, onMouseOut: function (e) { return _this.handleMouseOut(e); } },\r\n            React.createElement(\"rect\", { key: \"handler-hit-rect\", ref: function (c) {\r\n                    _this.eventRect = c;\r\n                }, style: { opacity: 0.0, cursor: cursor }, x: 0, y: 0, width: this.props.width, height: this.props.height }),\r\n            this.props.children));\r\n    };\r\n    EventHandler.defaultProps = {\r\n        enablePanZoom: false\r\n    };\r\n    return EventHandler;\r\n}(React.Component));\r\nexport { EventHandler };\r\n","map":{"mappings":""},"dts":{"name":"/Users/pmurphy/code/react-timeseries-charts/packages/react-timeseries-charts/EventHandler.d.ts","text":"/// <reference types=\"react\" />\r\nimport * as React from \"react\";\r\nimport { ScaleTime } from \"d3-scale\";\r\nimport { TimeRange } from \"pondjs\";\r\nexport declare type EventHandlerProps = {\r\n    enablePanZoom?: boolean;\r\n    scale: ScaleTime<number, number>;\r\n    width: number;\r\n    height: number;\r\n    minDuration?: number;\r\n    minTime?: Date;\r\n    maxTime?: Date;\r\n    onZoom?: (timerange: TimeRange) => any;\r\n    onMouseMove?: (d: Date) => any;\r\n    onMouseOut?: () => any;\r\n    onMouseClick?: () => any;\r\n};\r\nexport declare type EventHandlerState = {\r\n    isPanning: boolean;\r\n    initialPanBegin: any;\r\n    initialPanEnd: any;\r\n    initialPanPosition: number[];\r\n};\r\nexport declare class EventHandler extends React.Component<EventHandlerProps, EventHandlerState> {\r\n    static defaultProps: Partial<EventHandlerProps>;\r\n    eventRect: SVGRectElement;\r\n    constructor(props: EventHandlerProps);\r\n    getOffsetMousePosition(e: React.MouseEvent<SVGGElement>): number[];\r\n    handleScrollWheel(e: React.WheelEvent<SVGGElement>): void;\r\n    handleMouseDown(e: React.MouseEvent<SVGGElement>): boolean;\r\n    handleMouseUp(e: React.MouseEvent<SVGGElement>): void;\r\n    handleMouseOut(e: React.MouseEvent<SVGGElement>): void;\r\n    handleMouseMove(e: React.MouseEvent<SVGGElement>): void;\r\n    render(): JSX.Element;\r\n}\r\n"}}
