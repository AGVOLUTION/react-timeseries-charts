{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as _ from \"lodash\";\r\nimport * as invariant from \"invariant\";\r\nimport * as moment from \"moment-timezone\";\r\nimport * as React from \"react\";\r\nimport { scaleTime, scaleUtc } from \"d3-scale\";\r\nimport { TimeAxis } from \"react-axis\";\r\nimport { Brush } from \"./Brush\";\r\nimport { ChartRow } from \"./ChartRow\";\r\nimport { Charts } from \"./Charts\";\r\nimport { EventHandler } from \"./EventHandler\";\r\nimport { TimeMarker } from \"./TimeMarker\";\r\nvar defaultTimeAxisStyle = {\r\n    labels: {\r\n        labelColor: \"#8B7E7E\",\r\n        labelWeight: 100,\r\n        labelSize: 11\r\n    },\r\n    axis: {\r\n        axisColor: \"#C0C0C0\",\r\n        axisWidth: 1\r\n    }\r\n};\r\nexport var ShowGridPosition;\r\n(function (ShowGridPosition) {\r\n    ShowGridPosition[\"Over\"] = \"OVER\";\r\n    ShowGridPosition[\"Under\"] = \"UNDER\";\r\n})(ShowGridPosition || (ShowGridPosition = {}));\r\nvar ChartContainer = (function (_super) {\r\n    tslib_1.__extends(ChartContainer, _super);\r\n    function ChartContainer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ChartContainer.prototype.handleMouseMove = function (t) {\r\n        if (this.props.onTrackerChanged) {\r\n            this.props.onTrackerChanged(t);\r\n        }\r\n    };\r\n    ChartContainer.prototype.handleMouseOut = function () {\r\n        if (this.props.onTrackerChanged) {\r\n            this.props.onTrackerChanged(null);\r\n        }\r\n    };\r\n    ChartContainer.prototype.handleBackgroundClick = function () {\r\n        if (this.props.onBackgroundClick) {\r\n            this.props.onBackgroundClick();\r\n        }\r\n    };\r\n    ChartContainer.prototype.handleZoom = function (timerange) {\r\n        if (this.props.onTimeRangeChanged) {\r\n            this.props.onTimeRangeChanged(timerange);\r\n        }\r\n    };\r\n    ChartContainer.prototype.render = function () {\r\n        var _this = this;\r\n        var chartRows = [];\r\n        var leftAxisWidths = [];\r\n        var rightAxisWidths = [];\r\n        React.Children.forEach(this.props.children, function (childRow) {\r\n            if (childRow.type === ChartRow) {\r\n                var countLeft_1 = 0;\r\n                var countCharts_1 = 0;\r\n                var align_1 = \"left\";\r\n                React.Children.forEach(childRow.props.children, function (child) {\r\n                    if (child.type === Charts) {\r\n                        countCharts_1 += 1;\r\n                        align_1 = \"right\";\r\n                    }\r\n                    else if (child.type !== Brush) {\r\n                        if (align_1 === \"left\") {\r\n                            countLeft_1 += 1;\r\n                        }\r\n                    }\r\n                });\r\n                if (countCharts_1 !== 1) {\r\n                    var msg = \"ChartRow should have one and only one <Charts> tag within it\";\r\n                    invariant(false, msg, childRow.constructor.name);\r\n                }\r\n                align_1 = \"left\";\r\n                var pos_1 = countLeft_1 - 1;\r\n                React.Children.forEach(childRow.props.children, function (child) {\r\n                    if (child.type === Charts || child.type === Brush) {\r\n                        if (child.type === Charts) {\r\n                            align_1 = \"right\";\r\n                            pos_1 = 0;\r\n                        }\r\n                    }\r\n                    else {\r\n                        var width = Number(child.props.width) || 40;\r\n                        if (align_1 === \"left\") {\r\n                            leftAxisWidths[pos_1] = leftAxisWidths[pos_1]\r\n                                ? Math.max(width, leftAxisWidths[pos_1])\r\n                                : width;\r\n                            pos_1 -= 1;\r\n                        }\r\n                        else if (align_1 === \"right\") {\r\n                            rightAxisWidths[pos_1] = rightAxisWidths[pos_1]\r\n                                ? Math.max(width, rightAxisWidths[pos_1])\r\n                                : width;\r\n                            pos_1 += 1;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        var leftWidth = _.reduce(leftAxisWidths, function (a, b) { return a + b; }, 0);\r\n        var rightWidth = _.reduce(rightAxisWidths, function (a, b) { return a + b; }, 0);\r\n        var timeAxisHeight = 35;\r\n        var timeAxisWidth = this.props.width - leftWidth - rightWidth;\r\n        if (!this.props.timeRange) {\r\n            throw Error(\"Invalid timerange passed to ChartContainer\");\r\n        }\r\n        console.log(\"timerange \", this.props.timeRange);\r\n        var timeScale = this.props.timezone === \"Etc/UTC\"\r\n            ? scaleUtc()\r\n                .domain([this.props.timeRange.begin(), this.props.timeRange.end()])\r\n                .range([0, timeAxisWidth])\r\n            : scaleTime()\r\n                .domain([this.props.timeRange.begin(), this.props.timeRange.end()])\r\n                .range([0, timeAxisWidth]);\r\n        var i = 0;\r\n        var yPosition = 0;\r\n        React.Children.forEach(this.props.children, function (child) {\r\n            if (child.type === ChartRow) {\r\n                var chartRow = child;\r\n                var rowKey = \"chart-row-row-\" + i;\r\n                var firstRow = i === 0;\r\n                var props = {\r\n                    timeScale: timeScale,\r\n                    leftAxisWidths: leftAxisWidths,\r\n                    rightAxisWidths: rightAxisWidths,\r\n                    width: _this.props.width,\r\n                    transition: _this.props.transition,\r\n                    timeFormat: _this.props.timeFormat,\r\n                    trackerShowTime: firstRow,\r\n                    trackerTime: _this.props.trackerTime,\r\n                    trackerTimeFormat: _this.props.timeFormat\r\n                };\r\n                var transform = \"translate(\" + -leftWidth + \",\" + yPosition + \")\";\r\n                chartRows.push(React.createElement(\"g\", { transform: transform, key: rowKey }, React.cloneElement(chartRow, props)));\r\n                yPosition += parseInt(child.props.height, 10);\r\n            }\r\n            i += 1;\r\n        });\r\n        var chartsHeight = yPosition;\r\n        var chartsWidth = this.props.width - leftWidth - rightWidth;\r\n        var tracker;\r\n        if (this.props.trackerTime && this.props.timeRange.contains(this.props.trackerTime)) {\r\n            tracker = (React.createElement(\"g\", { key: \"tracker-group\", style: { pointerEvents: \"none\" }, transform: \"translate(\" + leftWidth + \",0)\" },\r\n                React.createElement(TimeMarker, { key: \"marker\", width: chartsWidth, height: chartsHeight, showInfoBox: false, time: this.props.trackerTime, timeScale: timeScale, timeFormat: this.props.timeFormat, info: this.props.trackerInfo, infoWidth: this.props.trackerInfoWidth, infoHeight: this.props.trackerInfoHeight })));\r\n        }\r\n        var xStyle = {\r\n            stroke: this.props.timeAxisStyle.axis.axisColor,\r\n            strokeWidth: this.props.timeAxisStyle.axis.axisWidth,\r\n            fill: \"none\",\r\n            pointerEvents: \"none\"\r\n        };\r\n        var gridHeight = this.props.showGrid ? chartsHeight : 0;\r\n        var timezone = this.props.timezone === \"local\" ? moment.tz.guess() : this.props.timezone;\r\n        var timeAxis = (React.createElement(\"g\", { transform: \"translate(\" + leftWidth + \",\" + chartsHeight + \")\" },\r\n            React.createElement(\"line\", { x1: -leftWidth, y1: 0.5, x2: this.props.width, y2: 0.5, style: xStyle }),\r\n            React.createElement(TimeAxis, { timezone: timezone, position: \"bottom\", beginTime: new Date(this.props.timeRange.begin().getTime()), endTime: new Date(this.props.timeRange.end().getTime()), width: timeAxisWidth, margin: 0, height: 50, tickExtend: gridHeight })));\r\n        var rows = (React.createElement(\"g\", { transform: \"translate(\" + leftWidth + \",\" + 0 + \")\" },\r\n            React.createElement(EventHandler, { key: \"event-handler\", width: chartsWidth, height: chartsHeight + timeAxisHeight, scale: timeScale, enablePanZoom: this.props.enablePanZoom, minDuration: this.props.minDuration, minTime: this.props.minTime, maxTime: this.props.maxTime, onMouseOut: function () { return _this.handleMouseOut(); }, onMouseMove: function (d) { return _this.handleMouseMove(d); }, onMouseClick: function () { return _this.handleBackgroundClick(); }, onZoom: function (tr) { return _this.handleZoom(tr); } }, chartRows)));\r\n        var svgWidth = this.props.width;\r\n        var svgHeight = yPosition + timeAxisHeight;\r\n        return this.props.showGridPosition === ShowGridPosition.Over ? (React.createElement(\"svg\", { width: svgWidth, height: svgHeight, style: { display: \"block\" } },\r\n            rows,\r\n            tracker,\r\n            timeAxis)) : (React.createElement(\"svg\", { width: svgWidth, height: svgHeight, style: { display: \"block\" } },\r\n            timeAxis,\r\n            rows,\r\n            tracker));\r\n    };\r\n    ChartContainer.defaultProps = {\r\n        width: 800,\r\n        enablePanZoom: false,\r\n        timezone: \"Etc/UTC\",\r\n        showGrid: false,\r\n        showGridPosition: ShowGridPosition.Under,\r\n        timeAxisStyle: defaultTimeAxisStyle\r\n    };\r\n    return ChartContainer;\r\n}(React.Component));\r\nexport { ChartContainer };\r\n","map":{"mappings":""},"dts":{"name":"/Users/pmurphy/code/react-timeseries-charts/packages/react-timeseries-charts/ChartContainer.d.ts","text":"/// <reference types=\"react\" />\r\nimport * as React from \"react\";\r\nimport { TimeRange } from \"pondjs\";\r\nimport { LabelValueList } from \"./types\";\r\nexport declare type StyleTargets = {\r\n    labels: any;\r\n    axis: any;\r\n};\r\nexport declare type StyleTargetKeys = keyof StyleTargets;\r\nexport declare type TimeAxisStyleType = {\r\n    [K in StyleTargetKeys]: object;\r\n};\r\nexport declare enum ShowGridPosition {\r\n    Over = \"OVER\",\r\n    Under = \"UNDER\",\r\n}\r\nexport declare type ChartContainerProps = {\r\n    children?: any;\r\n    timeRange: TimeRange;\r\n    timezone?: string;\r\n    width?: number;\r\n    minTime?: Date;\r\n    maxTime?: Date;\r\n    timeFormat?: string;\r\n    timeAxisStyle: any;\r\n    enablePanZoom?: boolean;\r\n    minDuration?: number;\r\n    transition?: number;\r\n    showGrid?: boolean;\r\n    showGridPosition: ShowGridPosition;\r\n    trackerTime?: Date;\r\n    trackerInfo?: LabelValueList | string;\r\n    trackerInfoWidth?: number;\r\n    trackerInfoHeight?: number;\r\n    onTrackerChanged?: (time: Date) => any;\r\n    onTimeRangeChanged?: (timerange: TimeRange) => any;\r\n    onBackgroundClick?: () => any;\r\n};\r\nexport declare class ChartContainer extends React.Component<ChartContainerProps> {\r\n    static defaultProps: Partial<ChartContainerProps>;\r\n    handleMouseMove(t: Date): void;\r\n    handleMouseOut(): void;\r\n    handleBackgroundClick(): void;\r\n    handleZoom(timerange: TimeRange): void;\r\n    render(): JSX.Element;\r\n}\r\n"}}
