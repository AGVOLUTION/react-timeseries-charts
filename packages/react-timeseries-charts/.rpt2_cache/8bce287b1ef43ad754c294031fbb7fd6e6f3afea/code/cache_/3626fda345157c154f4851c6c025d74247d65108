{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from \"react\";\r\nimport Flexbox from \"flexbox-react\";\r\nexport var LegendItemType;\r\n(function (LegendItemType) {\r\n    LegendItemType[\"Swatch\"] = \"SWATCH\";\r\n    LegendItemType[\"Line\"] = \"LINE\";\r\n    LegendItemType[\"Dot\"] = \"DOT\";\r\n})(LegendItemType || (LegendItemType = {}));\r\nvar LegendItem = (function (_super) {\r\n    tslib_1.__extends(LegendItem, _super);\r\n    function LegendItem() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    LegendItem.prototype.handleClick = function (e, key) {\r\n        e.stopPropagation();\r\n        if (this.props.onSelectionChange) {\r\n            this.props.onSelectionChange(key);\r\n        }\r\n    };\r\n    LegendItem.prototype.handleHover = function (e, key) {\r\n        if (this.props.onHighlightChange) {\r\n            this.props.onHighlightChange(key);\r\n        }\r\n    };\r\n    LegendItem.prototype.handleHoverLeave = function () {\r\n        if (this.props.onHighlightChange) {\r\n            this.props.onHighlightChange(null);\r\n        }\r\n    };\r\n    LegendItem.prototype.renderLine = function (style) {\r\n        var _a = this.props, symbolWidth = _a.symbolWidth, symbolHeight = _a.symbolHeight;\r\n        return (React.createElement(\"svg\", { style: { float: \"left\" }, width: symbolWidth, height: symbolHeight },\r\n            React.createElement(\"line\", { style: style, x1: 0, y1: Math.round(symbolWidth / 2), x2: symbolWidth, y2: Math.round(symbolWidth / 2), stroke: \"black\", strokeWidth: \"2\" })));\r\n    };\r\n    LegendItem.prototype.renderSwatch = function (style) {\r\n        var _a = this.props, symbolWidth = _a.symbolWidth, symbolHeight = _a.symbolHeight;\r\n        return (React.createElement(\"svg\", { style: { float: \"left\" }, width: symbolWidth, height: symbolHeight },\r\n            React.createElement(\"rect\", { style: style, x: 2, y: 2, width: symbolWidth - 4, height: symbolHeight - 4, rx: 2, ry: 2 })));\r\n    };\r\n    LegendItem.prototype.renderDot = function (style) {\r\n        var _a = this.props, symbolWidth = _a.symbolWidth, symbolHeight = _a.symbolHeight;\r\n        return (React.createElement(\"svg\", { style: { float: \"left\" }, width: symbolWidth, height: symbolHeight },\r\n            React.createElement(\"ellipse\", { style: style, cx: Math.round(symbolWidth / 2) + 2, cy: Math.round(symbolHeight / 2) + 1, rx: Math.round(symbolWidth / 2) - 2, ry: Math.round(symbolHeight / 2) - 2 })));\r\n    };\r\n    LegendItem.prototype.render = function () {\r\n        var _this = this;\r\n        var _a = this.props, symbolStyle = _a.symbolStyle, labelStyle = _a.labelStyle, valueStyle = _a.valueStyle, itemKey = _a.itemKey;\r\n        var symbol;\r\n        switch (this.props.type) {\r\n            case LegendItemType.Swatch:\r\n                symbol = this.renderSwatch(symbolStyle);\r\n                break;\r\n            case LegendItemType.Line:\r\n                symbol = this.renderLine(symbolStyle);\r\n                break;\r\n            case LegendItemType.Dot:\r\n                symbol = this.renderDot(symbolStyle);\r\n                break;\r\n            default:\r\n        }\r\n        return (React.createElement(Flexbox, { flexDirection: \"column\", key: itemKey },\r\n            React.createElement(\"div\", { onClick: function (e) { return _this.handleClick(e, itemKey); }, onMouseMove: function (e) { return _this.handleHover(e, itemKey); }, onMouseLeave: function () { return _this.handleHoverLeave(); } },\r\n                React.createElement(Flexbox, { flexDirection: \"row\" },\r\n                    React.createElement(Flexbox, { width: \"20px\" }, symbol),\r\n                    React.createElement(Flexbox, { flexDirection: \"column\" },\r\n                        React.createElement(Flexbox, null,\r\n                            React.createElement(\"div\", { style: labelStyle }, this.props.label)),\r\n                        React.createElement(Flexbox, null,\r\n                            React.createElement(\"div\", { style: valueStyle }, this.props.value)))))));\r\n    };\r\n    return LegendItem;\r\n}(React.Component));\r\nexport { LegendItem };\r\n","map":{"mappings":""},"dts":{"name":"/Users/pmurphy/code/react-timeseries-charts/packages/react-timeseries-charts/LegendItem.d.ts","text":"/// <reference types=\"react\" />\r\nimport * as React from \"react\";\r\nimport { ElementStyle } from \"./style\";\r\nexport declare enum LegendItemType {\r\n    Swatch = \"SWATCH\",\r\n    Line = \"LINE\",\r\n    Dot = \"DOT\",\r\n}\r\nexport declare type LegendItemProps = {\r\n    itemKey: string;\r\n    type: LegendItemType;\r\n    label: string;\r\n    value: string;\r\n    symbolWidth: number;\r\n    symbolHeight: number;\r\n    symbolStyle: ElementStyle;\r\n    labelStyle: ElementStyle;\r\n    valueStyle: ElementStyle;\r\n    onSelectionChange: (key: string) => any;\r\n    onHighlightChange: (key: string) => any;\r\n};\r\nexport declare class LegendItem extends React.Component<LegendItemProps> {\r\n    handleClick(e: React.MouseEvent<HTMLDivElement>, key: string): void;\r\n    handleHover(e: React.MouseEvent<HTMLDivElement>, key: string): void;\r\n    handleHoverLeave(): void;\r\n    renderLine(style: ElementStyle): JSX.Element;\r\n    renderSwatch(style: ElementStyle): JSX.Element;\r\n    renderDot(style: ElementStyle): JSX.Element;\r\n    render(): JSX.Element;\r\n}\r\n"}}
