{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as _ from \"lodash\";\r\nimport * as React from \"react\";\r\nimport { Event } from \"pondjs\";\r\nimport { EventMarker } from \"./EventMarker\";\r\nimport { Styler } from \"./styler\";\r\nimport { defaultBarChartChannelStyle as defaultStyle } from \"./style\";\r\nvar BarChart = (function (_super) {\r\n    tslib_1.__extends(BarChart, _super);\r\n    function BarChart() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    BarChart.prototype.handleHover = function (e, event, column) {\r\n        var bar = { event: event, column: column };\r\n        if (this.props.onHighlightChange) {\r\n            this.props.onHighlightChange(bar);\r\n        }\r\n    };\r\n    BarChart.prototype.handleHoverLeave = function () {\r\n        if (this.props.onHighlightChange) {\r\n            this.props.onHighlightChange(null);\r\n        }\r\n    };\r\n    BarChart.prototype.handleClick = function (e, event, column) {\r\n        var bar = { event: event, column: column };\r\n        if (this.props.onSelectionChange) {\r\n            this.props.onSelectionChange(bar);\r\n        }\r\n        e.stopPropagation();\r\n    };\r\n    BarChart.prototype.providedColumnStyle = function (column) {\r\n        var style;\r\n        if (this.props.style) {\r\n            if (this.props.style instanceof Styler) {\r\n                style = this.props.style.barChartStyle()[column];\r\n            }\r\n            else if (_.isFunction(this.props.style)) {\r\n                style = this.props.style(column);\r\n            }\r\n            else if (_.isObject(this.props.style)) {\r\n                style = this.props.style ? this.props.style[column] : defaultStyle;\r\n            }\r\n        }\r\n        return style;\r\n    };\r\n    BarChart.prototype.style = function (element, column, event) {\r\n        var style;\r\n        var styleMap = this.providedColumnStyle(column);\r\n        var d = defaultStyle.bar;\r\n        var s = styleMap[element];\r\n        var isHighlighted = this.props.highlighted &&\r\n            column === this.props.highlighted.column &&\r\n            Event.is(this.props.highlighted.event, event);\r\n        var isSelected = this.props.selected &&\r\n            column === this.props.selected.column &&\r\n            Event.is(this.props.selected.event, event);\r\n        if (this.props.selected) {\r\n            if (isSelected) {\r\n                style = _.merge(d.selected, s.selected ? s.selected : {});\r\n            }\r\n            else if (isHighlighted) {\r\n                style = _.merge(d.highlighted, s.highlighted ? s.highlighted : {});\r\n            }\r\n            else {\r\n                style = _.merge(d.muted, s.muted ? s.muted : {});\r\n            }\r\n        }\r\n        else if (isHighlighted) {\r\n            style = _.merge(d.highlighted, s.highlighted ? s.highlighted : {});\r\n        }\r\n        else {\r\n            style = _.merge(d.normal, s.normal ? s.normal : {});\r\n        }\r\n        return style;\r\n    };\r\n    BarChart.prototype.renderBars = function () {\r\n        var _this = this;\r\n        var spacing = +this.props.spacing;\r\n        var offset = +this.props.offset;\r\n        var series = this.props.series;\r\n        var timeScale = this.props.timeScale;\r\n        var yScale = this.props.yScale;\r\n        var columns = this.props.columns;\r\n        var bars = [];\r\n        var eventMarker;\r\n        series\r\n            .collection()\r\n            .eventList()\r\n            .forEach(function (event) {\r\n            var begin = event.begin();\r\n            var end = event.end();\r\n            var beginPos = timeScale(begin) + spacing;\r\n            var endPos = timeScale(end) - spacing;\r\n            var width;\r\n            if (_this.props.size) {\r\n                width = _this.props.size;\r\n            }\r\n            else {\r\n                width = endPos - beginPos;\r\n            }\r\n            if (width < 1) {\r\n                width = 1;\r\n            }\r\n            var x;\r\n            if (_this.props.size) {\r\n                var center = timeScale(begin) + (timeScale(end) - timeScale(begin)) / 2;\r\n                x = center - _this.props.size / 2 + offset;\r\n            }\r\n            else {\r\n                x = timeScale(begin) + spacing + offset;\r\n            }\r\n            var yBase = yScale(0);\r\n            var yposPositive = yBase;\r\n            var yposNegative = yBase;\r\n            if (columns) {\r\n                var _loop_1 = function (column) {\r\n                    var index = event.indexAsString();\r\n                    var key = series.name() + \"-\" + index + \"-\" + column;\r\n                    var value = event.get(column);\r\n                    var style = _this.style(\"bar\", column, event);\r\n                    var height = yScale(0) - yScale(value);\r\n                    var positiveBar = height >= 0;\r\n                    height = Math.max(Math.abs(height), 1);\r\n                    var y = positiveBar ? yposPositive - height : yposNegative;\r\n                    var isHighlighted = _this.props.highlighted &&\r\n                        column === _this.props.highlighted.column &&\r\n                        Event.is(_this.props.highlighted.event, event);\r\n                    if (isHighlighted && _this.props.info) {\r\n                        var eventMarkerProps = {\r\n                            key: key,\r\n                            event: event,\r\n                            column: column,\r\n                            type: \"flag\",\r\n                            info: _this.props.info,\r\n                            style: _this.props.infoStyle,\r\n                            width: _this.props.width,\r\n                            height: _this.props.height,\r\n                            infoWidth: _this.props.infoWidth,\r\n                            infoHeight: _this.props.infoWidth,\r\n                            infoTimeFormat: _this.props.infoTimeFormat,\r\n                            markerRadius: _this.props.markerRadius,\r\n                            offsetX: offset,\r\n                            offsetY: yBase - (positiveBar ? yposPositive : yposNegative)\r\n                        };\r\n                        eventMarker = React.createElement(EventMarker, tslib_1.__assign({}, eventMarkerProps));\r\n                    }\r\n                    var barProps = {\r\n                        key: key,\r\n                        style: style,\r\n                        x: x,\r\n                        y: y,\r\n                        width: width,\r\n                        height: height\r\n                    };\r\n                    if (_this.props.onSelectionChange) {\r\n                        barProps.onClick = function (e) { return _this.handleClick(e, event, column); };\r\n                    }\r\n                    if (_this.props.onHighlightChange) {\r\n                        barProps.onMouseMove = function (e) { return _this.handleHover(e, event, column); };\r\n                        barProps.onMouseLeave = function () { return _this.handleHoverLeave(); };\r\n                    }\r\n                    bars.push(React.createElement(\"rect\", tslib_1.__assign({}, barProps)));\r\n                    if (positiveBar) {\r\n                        yposPositive -= height;\r\n                    }\r\n                    else {\r\n                        yposNegative += height;\r\n                    }\r\n                };\r\n                for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\r\n                    var column = columns_1[_i];\r\n                    _loop_1(column);\r\n                }\r\n            }\r\n        });\r\n        return (React.createElement(\"g\", null,\r\n            bars,\r\n            eventMarker));\r\n    };\r\n    BarChart.prototype.render = function () {\r\n        return React.createElement(\"g\", null, this.renderBars());\r\n    };\r\n    BarChart.defaultProps = {\r\n        columns: [\"value\"],\r\n        spacing: 1.0,\r\n        offset: 0,\r\n        markerRadius: 2,\r\n        infoWidth: 90,\r\n        infoHeight: 30\r\n    };\r\n    return BarChart;\r\n}(React.Component));\r\nexport { BarChart };\r\n","map":{"mappings":""},"dts":{"name":"/Users/pmurphy/code/react-timeseries-charts/packages/react-timeseries-charts/BarChart.d.ts","text":"/// <reference types=\"react\" />\r\nimport * as React from \"react\";\r\nimport { TimeSeries, Event, Key } from \"pondjs\";\r\nimport { ChartProps } from \"./Charts\";\r\nimport { Styler } from \"./styler\";\r\nimport { BarChartStyle, BarChartChannelStyle, EventMarkerStyle } from \"./style\";\r\nimport { LabelValueList } from \"./types\";\r\nexport declare type BarChartProps = ChartProps & {\r\n    series: TimeSeries<Key>;\r\n    spacing?: number;\r\n    offset?: number;\r\n    columns?: string[];\r\n    style?: BarChartStyle | ((column: string) => BarChartChannelStyle) | Styler;\r\n    info?: LabelValueList | string;\r\n    infoStyle?: EventMarkerStyle;\r\n    infoWidth?: number;\r\n    infoHeight?: number;\r\n    infoTimeFormat?: string | ((...args: any[]) => any);\r\n    markerRadius?: number;\r\n    size?: number;\r\n    selected?: {\r\n        event?: any;\r\n        column?: string;\r\n    };\r\n    onSelectionChange?: (...args: any[]) => any;\r\n    highlighted?: {\r\n        event?: any;\r\n        column?: string;\r\n    };\r\n    onHighlightChange?: (...args: any[]) => any;\r\n};\r\nexport declare class BarChart extends React.Component<BarChartProps> {\r\n    static defaultProps: Partial<BarChartProps>;\r\n    handleHover(e: React.MouseEvent<SVGRectElement>, event: Event<Key>, column: string): void;\r\n    handleHoverLeave(): void;\r\n    handleClick(e: React.MouseEvent<SVGRectElement>, event: Event<Key>, column: string): void;\r\n    providedColumnStyle(column: string): BarChartChannelStyle;\r\n    style(element: string, column: string, event: Event<Key>): any;\r\n    renderBars(): JSX.Element;\r\n    render(): JSX.Element;\r\n}\r\n"}}
