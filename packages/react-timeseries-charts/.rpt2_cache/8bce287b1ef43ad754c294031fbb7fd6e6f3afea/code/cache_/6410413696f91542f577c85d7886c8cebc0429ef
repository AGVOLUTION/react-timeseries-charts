{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from \"react\";\r\nexport var ScaleType;\r\n(function (ScaleType) {\r\n    ScaleType[\"Linear\"] = \"LINEAR\";\r\n    ScaleType[\"Power\"] = \"POWER\";\r\n    ScaleType[\"Log\"] = \"LOG\";\r\n})(ScaleType || (ScaleType = {}));\r\nvar Charts = (function (_super) {\r\n    tslib_1.__extends(Charts, _super);\r\n    function Charts() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Charts.prototype.render = function () {\r\n        return (React.createElement(\"g\", null,\r\n            \"`$\",\r\n            this.constructor.name,\r\n            \" elements are for configuration only and should not be rendered`\"));\r\n    };\r\n    return Charts;\r\n}(React.Component));\r\nexport { Charts };\r\n","map":{"mappings":""},"dts":{"name":"/Users/pmurphy/code/react-timeseries-charts/packages/react-timeseries-charts/Charts.d.ts","text":"/// <reference types=\"react\" />\r\nimport * as React from \"react\";\r\nimport { ScaleTime, ScaleLinear, ScaleLogarithmic } from \"d3-scale\";\r\nimport { ScalerFunction } from \"./interpolators\";\r\nexport declare type Scale = ScaleLogarithmic<number, number> | ScaleLinear<number, number> | ScaleLogarithmic<number, number>;\r\nexport declare enum ScaleType {\r\n    Linear = \"LINEAR\",\r\n    Power = \"POWER\",\r\n    Log = \"LOG\",\r\n}\r\nexport declare type AxisProps = {\r\n    type: ScaleType;\r\n    id: string;\r\n    max: number;\r\n    min: number;\r\n    transition?: number;\r\n    height: number;\r\n    width: number;\r\n};\r\nexport declare type ChartProps = {\r\n    key: string | number;\r\n    width: number;\r\n    height: number;\r\n    timeScale?: ScaleTime<number, number>;\r\n    yScale?: ScalerFunction;\r\n    timeFormat?: string;\r\n};\r\nexport declare type ChartsProps = {\r\n    children?: any;\r\n};\r\nexport declare class Charts extends React.Component<ChartsProps> {\r\n    render(): JSX.Element;\r\n}\r\n"}}
