{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as _ from \"lodash\";\r\nimport * as React from \"react\";\r\nimport { easeSinOut } from \"d3-ease\";\r\nimport { scaleLinear, scaleLog, scalePow } from \"d3-scale\";\r\nimport { Brush } from \"./Brush\";\r\nimport { Charts, ScaleType } from \"./Charts\";\r\nimport { TimeMarker } from \"./TimeMarker\";\r\nimport { YAxis } from \"./YAxis\";\r\nimport ScaleInterpolator from \"./interpolators\";\r\nvar AXIS_MARGIN = 5;\r\nfunction createScale(yaxis, type, min, max, y0, y1) {\r\n    if (_.isUndefined(min) || _.isUndefined(max)) {\r\n        return null;\r\n    }\r\n    switch (type) {\r\n        case ScaleType.Linear:\r\n            return scaleLinear()\r\n                .domain([min, max])\r\n                .range([y0, y1])\r\n                .nice();\r\n        case ScaleType.Log:\r\n            var base = yaxis.props.logBase || 10;\r\n            return scaleLog()\r\n                .base(base)\r\n                .domain([min, max])\r\n                .range([y0, y1]);\r\n        case ScaleType.Power:\r\n            var power = yaxis.props.powerExponent || 2;\r\n            return scalePow()\r\n                .exponent(power)\r\n                .domain([min, max])\r\n                .range([y0, y1]);\r\n    }\r\n}\r\nvar ChartRow = (function (_super) {\r\n    tslib_1.__extends(ChartRow, _super);\r\n    function ChartRow(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        var clipId = _.uniqueId(\"clip_\");\r\n        var clipPathURL = \"url(#\" + clipId + \")\";\r\n        _this.state = {\r\n            clipId: clipId,\r\n            clipPathURL: clipPathURL\r\n        };\r\n        _this.scaleInterpolatorMap = {};\r\n        return _this;\r\n    }\r\n    ChartRow.prototype.componentWillMount = function () {\r\n        var _this = this;\r\n        this.scaleInterpolatorMap = {};\r\n        var innerHeight = +this.props.height - AXIS_MARGIN * 2;\r\n        var rangeTop = AXIS_MARGIN;\r\n        var rangeBottom = innerHeight - AXIS_MARGIN;\r\n        React.Children.forEach(this.props.children, function (child) {\r\n            if ((child.type === YAxis || _.has(child.props, \"min\")) && _.has(child.props, \"max\")) {\r\n                var _a = child.props, id_1 = _a.id, max = _a.max, min = _a.min, _b = _a.transition, transition = _b === void 0 ? 0 : _b, _c = _a.type, type = _c === void 0 ? ScaleType.Linear : _c;\r\n                var initialScale = createScale(child, type, min, max, rangeBottom, rangeTop);\r\n                _this.scaleInterpolatorMap[id_1] = new ScaleInterpolator(transition, easeSinOut, function (s) {\r\n                    var yAxisScalerMap = _this.state.yAxisScalerMap;\r\n                    yAxisScalerMap[id_1] = s;\r\n                    _this.setState(yAxisScalerMap);\r\n                });\r\n                var cacheKey = type + \"-\" + min + \"-\" + max + \"-\" + rangeBottom + \"-\" + rangeTop;\r\n                _this.scaleInterpolatorMap[id_1].setScale(cacheKey, initialScale);\r\n            }\r\n        });\r\n        var scalerMap = {};\r\n        _.forEach(this.scaleInterpolatorMap, function (interpolator, id) {\r\n            scalerMap[id] = interpolator.scaler();\r\n        });\r\n        this.setState({ yAxisScalerMap: scalerMap });\r\n    };\r\n    ChartRow.prototype.componentWillReceiveProps = function (nextProps) {\r\n        var _this = this;\r\n        var innerHeight = +nextProps.height - AXIS_MARGIN * 2;\r\n        var rangeTop = AXIS_MARGIN;\r\n        var rangeBottom = innerHeight - AXIS_MARGIN;\r\n        React.Children.forEach(nextProps.children, function (child) {\r\n            if ((child.type === YAxis || _.has(child.props, \"min\")) && _.has(child.props, \"max\")) {\r\n                var _a = child.props, id_2 = _a.id, max = _a.max, min = _a.min, _b = _a.transition, transition = _b === void 0 ? 0 : _b, _c = _a.type, type = _c === void 0 ? \"linear\" : _c;\r\n                var scale = createScale(child, type, min, max, rangeBottom, rangeTop);\r\n                if (!_.has(_this.scaleInterpolatorMap, id_2)) {\r\n                    _this.scaleInterpolatorMap[id_2] = new ScaleInterpolator(transition, easeSinOut, function (s) {\r\n                        var yAxisScalerMap = _this.state.yAxisScalerMap;\r\n                        yAxisScalerMap[id_2] = s;\r\n                        _this.setState(yAxisScalerMap);\r\n                    });\r\n                }\r\n                var cacheKey = type + \"-\" + min + \"-\" + max + \"-\" + rangeBottom + \"-\" + rangeTop;\r\n                _this.scaleInterpolatorMap[id_2].setScale(cacheKey, scale);\r\n            }\r\n        });\r\n        var scalerMap = {};\r\n        _.forEach(this.scaleInterpolatorMap, function (interpolator, id) {\r\n            scalerMap[id] = interpolator.scaler();\r\n        });\r\n        this.setState({ yAxisScalerMap: scalerMap });\r\n    };\r\n    ChartRow.prototype.render = function () {\r\n        var _this = this;\r\n        var axes = [];\r\n        var chartList = [];\r\n        var innerHeight = +this.props.height - AXIS_MARGIN * 2;\r\n        var yAxisMap = {};\r\n        var leftAxisList = [];\r\n        var rightAxisList = [];\r\n        var alignLeft = true;\r\n        React.Children.forEach(this.props.children, function (child) {\r\n            if (child.type === Charts) {\r\n                alignLeft = false;\r\n            }\r\n            else {\r\n                var id_3 = child.props.id;\r\n                if ((child.type === YAxis || _.has(child.props, \"min\")) &&\r\n                    _.has(child.props, \"max\")) {\r\n                    var yaxis = child;\r\n                    if (yaxis.props.id) {\r\n                        yAxisMap[yaxis.props.id] = yaxis;\r\n                    }\r\n                    if (alignLeft) {\r\n                        leftAxisList.push(id_3);\r\n                    }\r\n                    else {\r\n                        rightAxisList.push(id_3);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        leftAxisList.reverse();\r\n        var transform;\r\n        var id;\r\n        var props;\r\n        var axis;\r\n        var posx = 0;\r\n        var leftWidth = _.reduce(this.props.leftAxisWidths, function (a, b) { return a + b; }, 0);\r\n        var rightWidth = _.reduce(this.props.rightAxisWidths, function (a, b) { return a + b; }, 0);\r\n        posx = leftWidth;\r\n        for (var leftColumnIndex = 0; leftColumnIndex < this.props.leftAxisWidths.length; leftColumnIndex += 1) {\r\n            var colWidth = this.props.leftAxisWidths[leftColumnIndex];\r\n            posx -= colWidth;\r\n            if (leftColumnIndex < leftAxisList.length) {\r\n                id = leftAxisList[leftColumnIndex];\r\n                transform = \"translate(\" + posx + \",0)\";\r\n                props = {\r\n                    width: colWidth,\r\n                    height: innerHeight,\r\n                    align: \"left\",\r\n                    scale: this.scaleInterpolatorMap[id].latestScale()\r\n                };\r\n                axis = React.cloneElement(yAxisMap[id], props);\r\n                axes.push(React.createElement(\"g\", { key: \"y-axis-left-\" + leftColumnIndex, transform: transform }, axis));\r\n            }\r\n        }\r\n        posx = this.props.width - rightWidth;\r\n        for (var rightColumnIndex = 0; rightColumnIndex < this.props.rightAxisWidths.length; rightColumnIndex += 1) {\r\n            var colWidth = this.props.rightAxisWidths[rightColumnIndex];\r\n            if (rightColumnIndex < rightAxisList.length) {\r\n                id = rightAxisList[rightColumnIndex];\r\n                transform = \"translate(\" + posx + \",0)\";\r\n                props = {\r\n                    width: colWidth,\r\n                    height: innerHeight,\r\n                    align: \"right\",\r\n                    scale: this.scaleInterpolatorMap[id].latestScale()\r\n                };\r\n                axis = React.cloneElement(yAxisMap[id], props);\r\n                axes.push(React.createElement(\"g\", { key: \"y-axis-right-\" + rightColumnIndex, transform: transform }, axis));\r\n            }\r\n            posx += colWidth;\r\n        }\r\n        var chartWidth = this.props.width - leftWidth - rightWidth;\r\n        var chartTransform = \"translate(\" + leftWidth + \",0)\";\r\n        var k = 0;\r\n        React.Children.forEach(this.props.children, function (child) {\r\n            if (child.type === Charts) {\r\n                var charts_1 = child;\r\n                React.Children.forEach(charts_1.props.children, function (chart) {\r\n                    var scale = null;\r\n                    if (_.has(_this.state.yAxisScalerMap, chart.props.axis)) {\r\n                        scale = _this.state.yAxisScalerMap[chart.props.axis];\r\n                    }\r\n                    var chartProps = {\r\n                        key: k,\r\n                        width: chartWidth,\r\n                        height: innerHeight,\r\n                        timeScale: _this.props.timeScale,\r\n                        timeFormat: _this.props.timeFormat\r\n                    };\r\n                    if (scale) {\r\n                        chartProps.yScale = scale;\r\n                    }\r\n                    chartList.push(React.cloneElement(chart, chartProps));\r\n                    k += 1;\r\n                });\r\n            }\r\n        });\r\n        var brushList = [];\r\n        k = 0;\r\n        React.Children.forEach(this.props.children, function (child) {\r\n            if (child.type === Brush) {\r\n                var brushProps = {\r\n                    key: \"brush-\" + k,\r\n                    width: chartWidth,\r\n                    height: innerHeight,\r\n                    timeScale: _this.props.timeScale\r\n                };\r\n                var brush = React.cloneElement(child, brushProps);\r\n                brushList.push(brush);\r\n            }\r\n            k += 1;\r\n        });\r\n        var charts = (React.createElement(\"g\", { transform: chartTransform, key: \"event-rect-group\" },\r\n            React.createElement(\"g\", { key: \"charts\", clipPath: this.state.clipPathURL }, chartList)));\r\n        var clipper = (React.createElement(\"defs\", null,\r\n            React.createElement(\"clipPath\", { id: this.state.clipId },\r\n                React.createElement(\"rect\", { x: \"0\", y: \"0\", width: chartWidth, height: innerHeight }))));\r\n        var brushes = (React.createElement(\"g\", { transform: chartTransform, key: \"brush-group\" }, brushList));\r\n        var tracker;\r\n        if (this.props.trackerTime) {\r\n            var timeFormat = this.props.trackerTimeFormat || this.props.timeFormat;\r\n            var timeMarkerProps = {\r\n                key: \"tracker\",\r\n                timeFormat: timeFormat,\r\n                showLine: false,\r\n                showTime: this.props.trackerShowTime,\r\n                time: this.props.trackerTime,\r\n                timeScale: this.props.timeScale,\r\n                height: this.props.height,\r\n                width: chartWidth\r\n            };\r\n            if (this.props.trackerInfoValues) {\r\n                timeMarkerProps.infoWidth = this.props.trackerInfoWidth;\r\n                timeMarkerProps.infoHeight = this.props.trackerInfoHeight;\r\n                timeMarkerProps.info = this.props.trackerInfoValues;\r\n                timeMarkerProps.timeFormat = this.props.trackerTimeFormat;\r\n            }\r\n            var trackerStyle = {\r\n                pointerEvents: \"none\"\r\n            };\r\n            var trackerTransform = \"translate(\" + leftWidth + \",0)\";\r\n            tracker = (React.createElement(\"g\", { key: \"tracker-group\", style: trackerStyle, transform: trackerTransform },\r\n                React.createElement(TimeMarker, tslib_1.__assign({}, timeMarkerProps))));\r\n        }\r\n        return (React.createElement(\"g\", null,\r\n            clipper,\r\n            axes,\r\n            charts,\r\n            brushes,\r\n            tracker));\r\n    };\r\n    ChartRow.defaultProps = {\r\n        trackerTimeFormat: \"%b %d %Y %X\",\r\n        height: 100\r\n    };\r\n    return ChartRow;\r\n}(React.Component));\r\nexport { ChartRow };\r\n","map":{"mappings":""},"dts":{"name":"/Users/pmurphy/code/react-timeseries-charts/packages/react-timeseries-charts/ChartRow.d.ts","text":"/// <reference types=\"react\" />\r\nimport * as React from \"react\";\r\nimport { ScaleTime } from \"d3-scale\";\r\nimport ScaleInterpolator, { ScalerFunction } from \"./interpolators\";\r\nimport { LabelValueList } from \"./types\";\r\nexport declare type ChartRowProps = {\r\n    children?: any;\r\n    width?: number;\r\n    height?: number;\r\n    timeScale?: ScaleTime<number, number>;\r\n    trackerTime?: Date;\r\n    trackerTimeFormat?: string;\r\n    timeFormat?: string;\r\n    trackerShowTime?: boolean;\r\n    trackerInfoWidth?: number;\r\n    trackerInfoHeight?: number;\r\n    trackerInfoValues?: LabelValueList | string;\r\n    leftAxisWidths?: number[];\r\n    rightAxisWidths?: number[];\r\n    transition: number;\r\n};\r\nexport declare type ChartRowState = {\r\n    yAxisScalerMap?: {\r\n        [key: string]: ScalerFunction;\r\n    };\r\n    clipId?: string;\r\n    clipPathURL?: string;\r\n};\r\nexport declare type ScalarMap = {\r\n    [id: string]: (v: number) => number;\r\n};\r\nexport declare type ElementMap = {\r\n    [id: string]: React.ReactElement<any>;\r\n};\r\nexport declare class ChartRow extends React.Component<ChartRowProps, ChartRowState> {\r\n    static defaultProps: Partial<ChartRowProps>;\r\n    scaleInterpolatorMap: {\r\n        [key: string]: ScaleInterpolator;\r\n    };\r\n    constructor(props: ChartRowProps);\r\n    componentWillMount(): void;\r\n    componentWillReceiveProps(nextProps: ChartRowProps): void;\r\n    render(): JSX.Element;\r\n}\r\n"}}
