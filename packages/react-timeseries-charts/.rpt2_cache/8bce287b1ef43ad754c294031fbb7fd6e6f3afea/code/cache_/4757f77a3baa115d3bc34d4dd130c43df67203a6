{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as _ from \"lodash\";\r\nimport { LegendItemType } from \"./LegendItem\";\r\nvar Styler = (function () {\r\n    function Styler(columns, scheme) {\r\n        if (scheme === void 0) { scheme = \"Paired\"; }\r\n        var _this = this;\r\n        this.columnStyles = {};\r\n        if (_.isArray(columns)) {\r\n            columns.forEach(function (column) {\r\n                if (_.isString(column)) {\r\n                    var c = column;\r\n                    _this.columnStyles[c] = { key: c };\r\n                }\r\n                else if (_.isObject(column)) {\r\n                    var c = column;\r\n                    var key = c.key, style = tslib_1.__rest(c, [\"key\"]);\r\n                    _this.columnStyles[key] = style;\r\n                }\r\n            });\r\n        }\r\n        this.columnNames = columns.map(function (c) {\r\n            var cc = _.isString(c) ? c : c.key;\r\n            return cc;\r\n        });\r\n    }\r\n    Styler.prototype.numColumns = function () {\r\n        return this.columnNames.length;\r\n    };\r\n    Styler.prototype.colorLookup = function (columnCount) {\r\n        return [];\r\n    };\r\n    Styler.prototype.legendStyle = function (column, type) {\r\n        var numColumns = this.numColumns();\r\n        var colorLookup = this.colorLookup(numColumns);\r\n        var i = _.indexOf(this.columnNames, column);\r\n        var columnName = this.columnNames[i];\r\n        var _a = this.columnStyles[columnName], color = _a.color, _b = _a.width, width = _b === void 0 ? 1 : _b, _c = _a.dashed, dashed = _c === void 0 ? false : _c;\r\n        var c = color || colorLookup[i % colorLookup.length];\r\n        var styleSymbol = {};\r\n        if (type === LegendItemType.Swatch || type === LegendItemType.Dot) {\r\n            styleSymbol = {\r\n                fill: c,\r\n                opacity: 0.9,\r\n                stroke: c,\r\n                cursor: \"pointer\"\r\n            };\r\n        }\r\n        else if (type === LegendItemType.Line) {\r\n            styleSymbol = {\r\n                opacity: 0.9,\r\n                stroke: c,\r\n                strokeWidth: width,\r\n                cursor: \"pointer\"\r\n            };\r\n            if (dashed) {\r\n                styleSymbol.strokeDasharray = \"4,2\";\r\n            }\r\n        }\r\n        var labelStyle = {\r\n            fontSize: \"normal\",\r\n            color: \"#333\",\r\n            paddingRight: 10,\r\n            cursor: \"pointer\"\r\n        };\r\n        var valueStyle = {\r\n            fontSize: \"smaller\",\r\n            color: \"#999\",\r\n            cursor: \"pointer\"\r\n        };\r\n        var legendStyle = {\r\n            symbol: {\r\n                normal: tslib_1.__assign({}, styleSymbol, { opacity: 0.7 }),\r\n                highlighted: tslib_1.__assign({}, styleSymbol, { opacity: 0.8 }),\r\n                selected: tslib_1.__assign({}, styleSymbol, { opacity: 0.8 }),\r\n                muted: tslib_1.__assign({}, styleSymbol, { opacity: 0.2 })\r\n            },\r\n            label: {\r\n                normal: tslib_1.__assign({}, labelStyle, { opacity: 0.7 }),\r\n                highlighted: tslib_1.__assign({}, labelStyle, { opacity: 0.8 }),\r\n                selected: tslib_1.__assign({}, labelStyle, { opacity: 0.8 }),\r\n                muted: tslib_1.__assign({}, labelStyle, { opacity: 0.5 })\r\n            },\r\n            value: {\r\n                normal: tslib_1.__assign({}, valueStyle, { opacity: 0.7 }),\r\n                highlighted: tslib_1.__assign({}, valueStyle, { opacity: 0.8 }),\r\n                selected: tslib_1.__assign({}, valueStyle, { opacity: 0.8 }),\r\n                muted: tslib_1.__assign({}, valueStyle, { opacity: 0.5 })\r\n            }\r\n        };\r\n        return legendStyle;\r\n    };\r\n    Styler.prototype.areaChartStyle = function () {\r\n        var style = {};\r\n        var numColumns = this.numColumns();\r\n        var colorLookup = this.colorLookup(numColumns);\r\n        var i = 0;\r\n        _.forEach(this.columnStyles, function (_a, column) {\r\n            var color = _a.color, selected = _a.selected, _b = _a.width, width = _b === void 0 ? 1 : _b, _c = _a.dashed, dashed = _c === void 0 ? false : _c;\r\n            var c = color || colorLookup[i % colorLookup.length];\r\n            var styleLine = {\r\n                stroke: c,\r\n                fill: \"none\",\r\n                strokeWidth: width\r\n            };\r\n            var styleSelectedLine = {\r\n                stroke: selected || color,\r\n                fill: \"none\",\r\n                strokeWidth: width\r\n            };\r\n            if (dashed) {\r\n                styleLine.strokeDasharray = \"4,2\";\r\n            }\r\n            var styleArea = {\r\n                fill: c,\r\n                stroke: \"none\"\r\n            };\r\n            var styleSelectedArea = {\r\n                fill: selected || color,\r\n                stroke: \"none\"\r\n            };\r\n            style[column] = {\r\n                line: {\r\n                    normal: tslib_1.__assign({}, styleLine, { opacity: 0.9 }),\r\n                    highlighted: tslib_1.__assign({}, styleLine, { opacity: 1.0 }),\r\n                    selected: tslib_1.__assign({}, styleSelectedLine, { opacity: 1.0 }),\r\n                    muted: tslib_1.__assign({}, styleLine, { opacity: 0.4 })\r\n                },\r\n                area: {\r\n                    normal: tslib_1.__assign({}, styleArea, { opacity: 0.7 }),\r\n                    highlighted: tslib_1.__assign({}, styleArea, { opacity: 0.8 }),\r\n                    selected: tslib_1.__assign({}, styleSelectedArea, { opacity: 0.8 }),\r\n                    muted: tslib_1.__assign({}, styleArea, { opacity: 0.2 })\r\n                }\r\n            };\r\n            i += 1;\r\n        });\r\n        return style;\r\n    };\r\n    Styler.prototype.lineChartStyle = function () {\r\n        var _this = this;\r\n        var style = {};\r\n        var numColumns = this.numColumns();\r\n        var colorLookup = this.colorLookup(numColumns);\r\n        _.forEach(this.columnStyles, function (_a, column) {\r\n            var color = _a.color, selected = _a.selected, _b = _a.width, width = _b === void 0 ? 1 : _b, _c = _a.dashed, dashed = _c === void 0 ? false : _c;\r\n            var i = _.indexOf(_this.columnNames, column);\r\n            var c = color || colorLookup[i % colorLookup.length];\r\n            var styleLine = {\r\n                stroke: c,\r\n                strokeWidth: width,\r\n                fill: \"none\"\r\n            };\r\n            var styleSelectedLine = {\r\n                stroke: selected || c,\r\n                strokeWidth: width,\r\n                fill: \"none\"\r\n            };\r\n            if (dashed) {\r\n                styleLine.strokeDasharray = \"4,2\";\r\n            }\r\n            style[column] = {\r\n                line: {\r\n                    normal: tslib_1.__assign({}, styleLine, { opacity: 0.8, strokeWidth: width }),\r\n                    highlighted: tslib_1.__assign({}, styleLine, { opacity: 1.0, strokeWidth: width }),\r\n                    selected: tslib_1.__assign({}, styleSelectedLine, { opacity: 1.0, strokeWidth: width }),\r\n                    muted: tslib_1.__assign({}, styleLine, { opacity: 0.2, strokeWidth: width })\r\n                }\r\n            };\r\n        });\r\n        return style;\r\n    };\r\n    Styler.prototype.barChartStyle = function () {\r\n        var _this = this;\r\n        var style = {};\r\n        var numColumns = this.numColumns();\r\n        var colorLookup = this.colorLookup(numColumns);\r\n        _.forEach(this.columnStyles, function (s, column) {\r\n            var color = s.color, selected = s.selected;\r\n            var i = _.indexOf(_this.columnNames, column);\r\n            var c = color || colorLookup[i % colorLookup.length];\r\n            var fillStyle = {\r\n                fill: c\r\n            };\r\n            var selectedStyle = {\r\n                fill: selected || c\r\n            };\r\n            style[column] = {\r\n                bar: {\r\n                    normal: tslib_1.__assign({}, fillStyle, { opacity: 0.8 }),\r\n                    highlighted: tslib_1.__assign({}, fillStyle, { opacity: 1.0 }),\r\n                    selected: tslib_1.__assign({}, selectedStyle, { opacity: 1.0 }),\r\n                    muted: tslib_1.__assign({}, fillStyle, { opacity: 0.2 })\r\n                }\r\n            };\r\n        });\r\n        return style;\r\n    };\r\n    Styler.prototype.scatterChartStyle = function () {\r\n        var _this = this;\r\n        var style = {};\r\n        var numColumns = this.numColumns();\r\n        var colorLookup = this.colorLookup(numColumns);\r\n        _.forEach(this.columnStyles, function (_a, column) {\r\n            var color = _a.color, selected = _a.selected;\r\n            var i = _.indexOf(_this.columnNames, column);\r\n            var c = color || colorLookup[i % colorLookup.length];\r\n            var fillStyle = {\r\n                fill: c\r\n            };\r\n            var selectedStyle = {\r\n                fill: selected || c\r\n            };\r\n            style[column] = {\r\n                point: {\r\n                    normal: tslib_1.__assign({}, fillStyle, { opacity: 0.8 }),\r\n                    highlighted: tslib_1.__assign({}, fillStyle, { opacity: 1.0 }),\r\n                    selected: tslib_1.__assign({}, selectedStyle, { opacity: 1.0 }),\r\n                    muted: tslib_1.__assign({}, fillStyle, { opacity: 0.2 })\r\n                }\r\n            };\r\n        });\r\n        return style;\r\n    };\r\n    Styler.prototype.axisStyle = function (column) {\r\n        var numColumns = this.numColumns();\r\n        var colorLookup = this.colorLookup(numColumns);\r\n        var i = _.indexOf(this.columnNames, column);\r\n        var columnName = this.columnNames[i];\r\n        var color = this.columnStyles[columnName].color;\r\n        var c = color || colorLookup[i % colorLookup.length];\r\n        return {\r\n            fill: c\r\n        };\r\n    };\r\n    Styler.prototype.boxChartStyle = function () {\r\n        var style = {};\r\n        var numColumns = this.numColumns();\r\n        var colorLookup = this.colorLookup(numColumns);\r\n        var i = 0;\r\n        _.forEach(this.columnStyles, function (_a, column) {\r\n            var color = _a.color, selected = _a.selected;\r\n            var c = color || colorLookup[i % colorLookup.length];\r\n            var styleArea = {\r\n                fill: c,\r\n                stroke: \"none\"\r\n            };\r\n            var styleSelectedArea = {\r\n                fill: selected || color,\r\n                stroke: \"none\"\r\n            };\r\n            style[column] = [\r\n                {\r\n                    normal: tslib_1.__assign({}, styleArea, { opacity: 0.2 }),\r\n                    highlighted: tslib_1.__assign({}, styleArea, { opacity: 0.3 }),\r\n                    selected: tslib_1.__assign({}, styleSelectedArea, { opacity: 0.3 }),\r\n                    muted: tslib_1.__assign({}, styleArea, { opacity: 0.1 })\r\n                },\r\n                {\r\n                    normal: tslib_1.__assign({}, styleArea, { opacity: 0.5 }),\r\n                    highlighted: tslib_1.__assign({}, styleArea, { opacity: 0.6 }),\r\n                    selected: tslib_1.__assign({}, styleSelectedArea, { opacity: 0.6 }),\r\n                    muted: tslib_1.__assign({}, styleArea, { opacity: 0.2 })\r\n                },\r\n                {\r\n                    normal: tslib_1.__assign({}, styleArea, { opacity: 0.9 }),\r\n                    highlighted: tslib_1.__assign({}, styleArea, { opacity: 1.0 }),\r\n                    selected: tslib_1.__assign({}, styleSelectedArea, { opacity: 1.0 }),\r\n                    muted: tslib_1.__assign({}, styleArea, { opacity: 0.2 })\r\n                }\r\n            ];\r\n            i += 1;\r\n        });\r\n        return style;\r\n    };\r\n    return Styler;\r\n}());\r\nexport { Styler };\r\nexport default function styler(columns, scheme) {\r\n    return new Styler(columns, scheme);\r\n}\r\n","map":{"mappings":""},"dts":{"name":"/Users/pmurphy/code/react-timeseries-charts/packages/react-timeseries-charts/styler.d.ts","text":"import { AreaChartStyle, BarChartStyle, CategoryStyle, ScatterChartStyle, BoxChartStyle, LineChartStyle } from \"./style\";\r\nimport { LegendItemType } from \"./LegendItem\";\r\nexport declare type KeyedStyle = {\r\n    key: string;\r\n};\r\nexport declare type StylerStyle = {\r\n    key: string;\r\n    style?: StylerStyle;\r\n    color?: string;\r\n    selected?: string;\r\n    width?: number;\r\n    dashed?: boolean;\r\n};\r\nexport declare type Column = string | KeyedStyle;\r\nexport declare class Styler {\r\n    colorScheme: string;\r\n    columnNames: any[];\r\n    columnStyles: {\r\n        [columnName: string]: StylerStyle;\r\n    };\r\n    constructor(columns: Column[], scheme?: string);\r\n    numColumns(): number;\r\n    colorLookup(columnCount: number): string[];\r\n    legendStyle(column: string, type: LegendItemType): CategoryStyle;\r\n    areaChartStyle(): AreaChartStyle;\r\n    lineChartStyle(): LineChartStyle;\r\n    barChartStyle(): BarChartStyle;\r\n    scatterChartStyle(): ScatterChartStyle;\r\n    axisStyle(column: string): {\r\n        fill: string;\r\n    };\r\n    boxChartStyle(): BoxChartStyle;\r\n}\r\nexport default function styler(columns: Column[], scheme?: string): Styler;\r\n"}}
