{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as _ from \"lodash\";\r\nimport * as React from \"react\";\r\nimport { Event } from \"pondjs\";\r\nimport { EventMarker } from \"./EventMarker\";\r\nimport { getElementOffset } from \"./util\";\r\nimport { Styler } from \"./styler\";\r\nimport { defaultScatterChartChannelStyle as defaultStyle, defaultEventMarkerStyle } from \"./style\";\r\nvar ScatterChart = (function (_super) {\r\n    tslib_1.__extends(ScatterChart, _super);\r\n    function ScatterChart(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.handleHover = _this.handleHover.bind(_this);\r\n        _this.handleHoverLeave = _this.handleHoverLeave.bind(_this);\r\n        return _this;\r\n    }\r\n    ScatterChart.prototype.getOffsetMousePosition = function (e) {\r\n        var offset = getElementOffset(this.eventrect);\r\n        var x = e.pageX - offset.left;\r\n        var y = e.pageY - offset.top;\r\n        return [Math.round(x), Math.round(y)];\r\n    };\r\n    ScatterChart.prototype.handleClick = function (e, event, column) {\r\n        var point = { event: event, column: column };\r\n        if (this.props.onSelectionChange) {\r\n            this.props.onSelectionChange(point);\r\n        }\r\n    };\r\n    ScatterChart.prototype.handleHover = function (e) {\r\n        var _a = this.getOffsetMousePosition(e), x = _a[0], y = _a[1];\r\n        var point;\r\n        var minDistance = Infinity;\r\n        for (var _i = 0, _b = this.props.columns; _i < _b.length; _i++) {\r\n            var column = _b[_i];\r\n            for (var _c = 0, _d = this.props.series.collection().eventList(); _c < _d.length; _c++) {\r\n                var event_1 = _d[_c];\r\n                var t = event_1.timestamp();\r\n                var value = event_1.get(column);\r\n                var px = this.props.timeScale(t);\r\n                var py = this.props.yScale(value);\r\n                var distance = Math.sqrt((px - x) * (px - x) + (py - y) * (py - y));\r\n                if (distance < minDistance) {\r\n                    point = { event: event_1, column: column };\r\n                    minDistance = distance;\r\n                }\r\n            }\r\n        }\r\n        if (this.props.onMouseNear) {\r\n            this.props.onMouseNear(point);\r\n        }\r\n    };\r\n    ScatterChart.prototype.handleHoverLeave = function () {\r\n        if (this.props.onMouseNear) {\r\n            this.props.onMouseNear(null);\r\n        }\r\n    };\r\n    ScatterChart.prototype.providedStyleMap = function (column, event) {\r\n        var style = {};\r\n        if (this.props.style) {\r\n            if (this.props.style instanceof Styler) {\r\n                return this.props.style.scatterChartStyle()[column];\r\n            }\r\n            else if (_.isFunction(this.props.style)) {\r\n                return this.props.style(column, event);\r\n            }\r\n            else if (_.isObject(this.props.style)) {\r\n                return this.props.style ? this.props.style[column] : defaultStyle;\r\n            }\r\n        }\r\n    };\r\n    ScatterChart.prototype.style = function (column, event) {\r\n        var style;\r\n        var styleMap = this.providedStyleMap(column, event);\r\n        var s = styleMap.point;\r\n        var d = defaultStyle.point;\r\n        var isHighlighted = this.props.highlight &&\r\n            column === this.props.highlight.column &&\r\n            Event.is(this.props.highlight.event, event);\r\n        var isSelected = this.props.selected &&\r\n            column === this.props.selected.column &&\r\n            Event.is(this.props.selected.event, event);\r\n        if (this.props.selected) {\r\n            if (isSelected) {\r\n                style = _.merge(d.selected, s.selected ? s.selected : {});\r\n            }\r\n            else if (isHighlighted) {\r\n                style = _.merge(d.highlighted, s.highlighted ? s.highlighted : {});\r\n            }\r\n            else {\r\n                style = _.merge(d.muted, s.muted ? s.muted : {});\r\n            }\r\n        }\r\n        else if (isHighlighted) {\r\n            style = _.merge(d.highlighted, s.highlighted ? s.highlighted : {});\r\n        }\r\n        else {\r\n            style = _.merge(d.normal, s.normal ? s.normal : {});\r\n        }\r\n        return style;\r\n    };\r\n    ScatterChart.prototype.renderScatter = function () {\r\n        var _this = this;\r\n        var _a = this.props, series = _a.series, timeScale = _a.timeScale, yScale = _a.yScale;\r\n        var points = [];\r\n        var eventMarker;\r\n        var pointerEvents = this.props.onSelectionChange ? \"auto\" : \"none\";\r\n        this.props.columns.forEach(function (column) {\r\n            var key = 1;\r\n            var _loop_1 = function (event_2) {\r\n                var t = new Date(event_2.begin().getTime() + (event_2.end().getTime() - event_2.begin().getTime()) / 2);\r\n                var value = event_2.get(column);\r\n                var style = _this.style(column, event_2);\r\n                var x = timeScale(t);\r\n                var y = yScale(value);\r\n                var radius = _.isFunction(_this.props.radius)\r\n                    ? _this.props.radius(event_2, column)\r\n                    : +_this.props.radius;\r\n                var isHighlighted = _this.props.highlight &&\r\n                    Event.is(_this.props.highlight.event, event_2) &&\r\n                    column === _this.props.highlight.column;\r\n                if (isHighlighted && _this.props.info) {\r\n                    var eventMarkerProps = {\r\n                        key: \"marker\",\r\n                        event: event_2,\r\n                        column: column,\r\n                        type: \"point\",\r\n                        info: _this.props.info,\r\n                        style: _this.props.infoStyle,\r\n                        width: _this.props.width,\r\n                        height: _this.props.height,\r\n                        infoWidth: _this.props.infoWidth,\r\n                        infoHeight: _this.props.infoWidth,\r\n                        infoTimeFormat: _this.props.infoTimeFormat,\r\n                        markerRadius: 0\r\n                    };\r\n                    eventMarker = React.createElement(EventMarker, tslib_1.__assign({}, eventMarkerProps));\r\n                }\r\n                var point = (React.createElement(\"circle\", { key: column + \"-\" + key, cx: x, cy: y, r: radius, style: style, pointerEvents: pointerEvents, onMouseMove: function (e) { return _this.handleHover(e); }, onClick: function (e) { return _this.handleClick(e, event_2, column); } }));\r\n                points.push(point);\r\n                key += 1;\r\n            };\r\n            for (var _i = 0, _a = series.collection().eventList(); _i < _a.length; _i++) {\r\n                var event_2 = _a[_i];\r\n                _loop_1(event_2);\r\n            }\r\n        });\r\n        return (React.createElement(\"g\", null,\r\n            points,\r\n            eventMarker));\r\n    };\r\n    ScatterChart.prototype.render = function () {\r\n        var _this = this;\r\n        return (React.createElement(\"g\", null,\r\n            React.createElement(\"rect\", { key: \"scatter-hit-rect\", ref: function (c) {\r\n                    _this.eventrect = c;\r\n                }, style: { opacity: 0.0 }, x: 0, y: 0, width: this.props.width, height: this.props.height, onMouseMove: function (e) { return _this.handleHover(e); }, onMouseLeave: function (e) { return _this.handleHoverLeave(); } }),\r\n            this.renderScatter()));\r\n    };\r\n    ScatterChart.defaultProps = {\r\n        columns: [\"value\"],\r\n        radius: 2.0,\r\n        infoStyle: defaultEventMarkerStyle,\r\n        infoWidth: 90,\r\n        infoHeight: 30\r\n    };\r\n    return ScatterChart;\r\n}(React.Component));\r\nexport { ScatterChart };\r\n","map":{"mappings":""},"dts":{"name":"/Users/pmurphy/code/react-timeseries-charts/packages/react-timeseries-charts/ScatterChart.d.ts","text":"/// <reference types=\"react\" />\r\nimport * as React from \"react\";\r\nimport { Event, Key } from \"pondjs\";\r\nimport { LabelValueList } from \"./types\";\r\nimport { Styler } from \"./styler\";\r\nimport { ChartProps } from \"./charts\";\r\nimport { ScatterChartStyle, ScatterChartChannelStyle, EventMarkerStyle } from \"./style\";\r\nexport declare type EventColumnPair = {\r\n    event?: Event<Key>;\r\n    column?: string;\r\n};\r\nexport declare type ScatterChartProps = ChartProps & {\r\n    series: any;\r\n    columns?: string[];\r\n    axis: string;\r\n    radius?: number | ((...args: any[]) => any) | any;\r\n    style?: ScatterChartStyle | ((channel: string, event?: Event<Key>) => ScatterChartChannelStyle) | Styler;\r\n    info?: LabelValueList | string;\r\n    infoStyle?: EventMarkerStyle;\r\n    infoWidth?: number;\r\n    infoHeight?: number;\r\n    infoTimeFormat?: ((date: Date) => string) | string;\r\n    selected?: EventColumnPair;\r\n    onSelectionChange?: (...args: any[]) => any;\r\n    highlight?: EventColumnPair;\r\n    onMouseNear?: (...args: any[]) => any;\r\n};\r\nexport declare class ScatterChart extends React.Component<ScatterChartProps> {\r\n    static defaultProps: Partial<ScatterChartProps>;\r\n    eventrect: SVGRectElement;\r\n    constructor(props: ScatterChartProps);\r\n    getOffsetMousePosition(e: React.MouseEvent<SVGElement>): number[];\r\n    handleClick(e: React.MouseEvent<SVGCircleElement>, event: Event<Key>, column: string): void;\r\n    handleHover(e: React.MouseEvent<SVGElement>): void;\r\n    handleHoverLeave(): void;\r\n    providedStyleMap(column: string, event: Event<Key>): ScatterChartChannelStyle;\r\n    style(column: string, event: Event<Key>): any;\r\n    renderScatter(): JSX.Element;\r\n    render(): JSX.Element;\r\n}\r\n"}}
