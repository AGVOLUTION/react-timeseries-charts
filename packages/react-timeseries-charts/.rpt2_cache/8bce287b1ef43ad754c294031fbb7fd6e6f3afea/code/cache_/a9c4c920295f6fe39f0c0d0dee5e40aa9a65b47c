{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as _ from \"lodash\";\r\nimport * as React from \"react\";\r\nimport { defaultInfoBoxStyle as defaultStyle } from \"./style\";\r\nvar Label = (function (_super) {\r\n    tslib_1.__extends(Label, _super);\r\n    function Label() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Label.prototype.render = function () {\r\n        var _a = this.props, label = _a.label, style = _a.style, align = _a.align, width = _a.width, height = _a.height;\r\n        var textStyle = tslib_1.__assign({}, style.text, { textAnchor: \"left\", pointerEvents: \"none\" });\r\n        var textStyleCentered = tslib_1.__assign({}, style.text, { textAnchor: \"middle\", pointerEvents: \"none\" });\r\n        var labelStyle = align === \"center\" ? textStyleCentered : textStyle;\r\n        var boxStyle = style.box;\r\n        var posx = align === \"center\" ? Math.round(width / 2) : 10;\r\n        var text = (React.createElement(\"text\", { x: posx, y: 5, dy: \"1.2em\", style: labelStyle }, label));\r\n        var box = React.createElement(\"rect\", { x: 0, y: 0, style: boxStyle, width: width, height: height });\r\n        return (React.createElement(\"g\", null,\r\n            box,\r\n            text));\r\n    };\r\n    Label.defaultProps = {\r\n        align: \"center\",\r\n        width: 100,\r\n        height: 100,\r\n        style: defaultStyle\r\n    };\r\n    return Label;\r\n}(React.Component));\r\nexport { Label };\r\nvar ValueList = (function (_super) {\r\n    tslib_1.__extends(ValueList, _super);\r\n    function ValueList() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ValueList.prototype.render = function () {\r\n        var _this = this;\r\n        var _a = this.props, align = _a.align, style = _a.style, width = _a.width, height = _a.height;\r\n        var textStyle = tslib_1.__assign({}, style.text, { textAnchor: \"left\", pointerEvents: \"none\" });\r\n        var textStyleCentered = tslib_1.__assign({}, style.text, { textAnchor: \"middle\", pointerEvents: \"none\" });\r\n        var values = this.props.values.map(function (item, i) {\r\n            if (align === \"left\") {\r\n                return (React.createElement(\"g\", { key: i },\r\n                    React.createElement(\"text\", { x: 10, y: 5, dy: (i + 1) * 1.2 + \"em\", style: textStyle },\r\n                        React.createElement(\"tspan\", { style: { fontWeight: 700 } }, item.label + \": \"),\r\n                        React.createElement(\"tspan\", null, \"\" + item.value))));\r\n            }\r\n            var posx = Math.round(_this.props.width / 2);\r\n            return (React.createElement(\"g\", { key: i },\r\n                React.createElement(\"text\", { x: posx, y: 5, dy: (i + 1) * 1.2 + \"em\", style: textStyleCentered },\r\n                    React.createElement(\"tspan\", { style: { fontWeight: 700 } }, item.label + \": \"),\r\n                    React.createElement(\"tspan\", null, \"\" + item.value))));\r\n        });\r\n        var box = React.createElement(\"rect\", { style: style.box, x: 0, y: 0, width: width, height: height });\r\n        return (React.createElement(\"g\", null,\r\n            box,\r\n            values));\r\n    };\r\n    ValueList.defaultProps = {\r\n        align: \"center\",\r\n        width: 100,\r\n        height: 100,\r\n        style: defaultStyle\r\n    };\r\n    return ValueList;\r\n}(React.Component));\r\nexport { ValueList };\r\nvar InfoBox = (function (_super) {\r\n    tslib_1.__extends(InfoBox, _super);\r\n    function InfoBox() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    InfoBox.prototype.render = function () {\r\n        var _a = this.props, info = _a.info, props = tslib_1.__rest(_a, [\"info\"]);\r\n        if (_.isString(info)) {\r\n            return React.createElement(Label, tslib_1.__assign({ label: info }, props));\r\n        }\r\n        else {\r\n            return React.createElement(ValueList, tslib_1.__assign({ values: info }, props));\r\n        }\r\n    };\r\n    InfoBox.defaultProps = {\r\n        align: \"center\",\r\n        width: 150,\r\n        height: 100,\r\n        style: defaultStyle\r\n    };\r\n    return InfoBox;\r\n}(React.Component));\r\nexport { InfoBox };\r\n","map":{"mappings":""},"dts":{"name":"/Users/pmurphy/code/react-timeseries-charts/packages/react-timeseries-charts/info.d.ts","text":"/// <reference types=\"react\" />\r\nimport * as React from \"react\";\r\nimport { LabelValueList } from \"./types\";\r\nimport { InfoBoxStyle } from \"./style\";\r\nexport declare type BoxProps = {\r\n    align?: \"center\" | \"left\";\r\n    style?: InfoBoxStyle;\r\n    width?: number;\r\n    height?: number;\r\n};\r\nexport declare type InfoBoxProps = BoxProps & {\r\n    info: string | LabelValueList;\r\n};\r\nexport declare type LabelProps = BoxProps & {\r\n    label: string;\r\n};\r\nexport declare type ValueListProps = BoxProps & {\r\n    values: LabelValueList;\r\n};\r\nexport declare class Label extends React.Component<LabelProps> {\r\n    static defaultProps: Partial<LabelProps>;\r\n    render(): JSX.Element;\r\n}\r\nexport declare class ValueList extends React.Component<ValueListProps> {\r\n    static defaultProps: Partial<ValueListProps>;\r\n    render(): JSX.Element;\r\n}\r\nexport declare class InfoBox extends React.Component<InfoBoxProps> {\r\n    static defaultProps: Partial<InfoBoxProps>;\r\n    render(): JSX.Element;\r\n}\r\n"}}
