{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as _ from \"lodash\";\r\nimport * as React from \"react\";\r\nimport { index } from \"pondjs\";\r\nimport { timeFormat } from \"d3-time-format\";\r\nimport { InfoBox } from \"./info\";\r\nimport { defaultEventMarkerStyle as defaultStyle } from \"./style\";\r\nvar textStyle = {\r\n    fontSize: 11,\r\n    textAnchor: \"left\",\r\n    fill: \"#bdbdbd\",\r\n    pointerEvents: \"none\"\r\n};\r\nvar EventTime = function (_a) {\r\n    var time = _a.time, _b = _a.format, format = _b === void 0 ? \"%m/%d/%y %X\" : _b;\r\n    var text;\r\n    if (_.isFunction(format)) {\r\n        text = format(time);\r\n    }\r\n    else {\r\n        var fmt = timeFormat(format);\r\n        text = fmt(time);\r\n    }\r\n    return (React.createElement(\"text\", { x: 0, y: 0, dy: \"1.2em\", style: textStyle }, text));\r\n};\r\nvar EventTimeRange = function (_a) {\r\n    var timerange = _a.timerange, _b = _a.format, format = _b === void 0 ? \"%m/%d/%y %X\" : _b;\r\n    var d1 = timerange.begin();\r\n    var d2 = timerange.end();\r\n    var beginText;\r\n    var endText;\r\n    if (_.isFunction(format)) {\r\n        beginText = format(d1);\r\n        endText = format(d2);\r\n    }\r\n    else {\r\n        var fmt = timeFormat(format);\r\n        beginText = fmt(d1);\r\n        endText = fmt(d2);\r\n    }\r\n    return (React.createElement(\"text\", { x: 0, y: 0, dy: \"1.2em\", style: textStyle }, beginText + \" to \" + endText));\r\n};\r\nvar EventIndex = function (_a) {\r\n    var index = _a.index, _b = _a.format, format = _b === void 0 ? \"%m/%d/%y %X\" : _b;\r\n    var textStyle = {\r\n        fontSize: 11,\r\n        textAnchor: \"left\",\r\n        fill: \"#bdbdbd\",\r\n        pointerEvents: \"none\"\r\n    };\r\n    var text;\r\n    if (_.isFunction(format)) {\r\n        text = format(index.begin());\r\n    }\r\n    else if (_.isString(format)) {\r\n        var fmt = timeFormat(format);\r\n        text = fmt(index.begin());\r\n    }\r\n    else {\r\n        text = index.toString();\r\n    }\r\n    return (React.createElement(\"text\", { x: 0, y: 0, dy: \"1.2em\", style: textStyle }, text));\r\n};\r\nvar EventMarker = (function (_super) {\r\n    tslib_1.__extends(EventMarker, _super);\r\n    function EventMarker() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    EventMarker.prototype.renderTime = function (event) {\r\n        if (event.keyType() === \"time\") {\r\n            return React.createElement(EventTime, { time: event.timestamp(), format: this.props.infoTimeFormat });\r\n        }\r\n        else if (event.keyType() === \"index\") {\r\n            return (React.createElement(EventIndex, { index: index(event.indexAsString()), format: this.props.infoTimeFormat }));\r\n        }\r\n        else if (event.keyType() === \"timerange\") {\r\n            return (React.createElement(EventTimeRange, { timerange: event.timerange(), format: this.props.infoTimeFormat }));\r\n        }\r\n        return React.createElement(\"g\", null);\r\n    };\r\n    EventMarker.prototype.renderMarker = function (event, column, info) {\r\n        var t;\r\n        if (event.keyType() === \"time\") {\r\n            t = event.timestamp();\r\n        }\r\n        else {\r\n            t = new Date(event.begin().getTime() + (event.end().getTime() - event.begin().getTime()) / 2);\r\n        }\r\n        var value;\r\n        if (this.props.yValueFunc) {\r\n            value = this.props.yValueFunc(event, column);\r\n        }\r\n        else {\r\n            value = event.get(column);\r\n        }\r\n        var posx = this.props.timeScale(t) + this.props.offsetX;\r\n        var posy = this.props.yScale(value) - this.props.offsetY;\r\n        var style = this.props.style;\r\n        var align = \"left\";\r\n        var infoBoxProps = {\r\n            align: align,\r\n            style: {\r\n                text: style.text,\r\n                box: style.box\r\n            },\r\n            width: this.props.infoWidth,\r\n            height: this.props.infoHeight\r\n        };\r\n        var w = this.props.infoWidth;\r\n        var lineBottom = posy - 10;\r\n        var verticalStem;\r\n        var horizontalStem;\r\n        var dot;\r\n        var infoBox;\r\n        var transform;\r\n        var label;\r\n        if (info) {\r\n            infoBox = React.createElement(InfoBox, tslib_1.__assign({}, infoBoxProps, { info: info }));\r\n        }\r\n        if (this.props.type === \"point\") {\r\n            var dx = 0;\r\n            var dy = 0;\r\n            var textDefaultStyle = {\r\n                fontSize: 11,\r\n                pointerEvents: \"none\",\r\n                paintOrder: \"stroke\",\r\n                fill: \"#b0b0b0\",\r\n                strokeWidth: 2,\r\n                strokeLinecap: \"butt\",\r\n                strokeLinejoin: \"miter\",\r\n                fontWeight: 800\r\n            };\r\n            switch (this.props.markerLabelAlign) {\r\n                case \"left\":\r\n                    dx = 5;\r\n                    textDefaultStyle.textAnchor = \"start\";\r\n                    textDefaultStyle.alignmentBaseline = \"central\";\r\n                    break;\r\n                case \"right\":\r\n                    dx = -5;\r\n                    textDefaultStyle.textAnchor = \"end\";\r\n                    textDefaultStyle.alignmentBaseline = \"central\";\r\n                    break;\r\n                case \"top\":\r\n                    dy = -5;\r\n                    textDefaultStyle.textAnchor = \"middle\";\r\n                    textDefaultStyle.alignmentBaseline = \"bottom\";\r\n                    break;\r\n                case \"bottom\":\r\n                    dy = 5;\r\n                    textDefaultStyle.textAnchor = \"middle\";\r\n                    textDefaultStyle.alignmentBaseline = \"hanging\";\r\n                    break;\r\n                default:\r\n            }\r\n            var tstyle = _.merge(textDefaultStyle, this.props.style.text);\r\n            dot = (React.createElement(\"circle\", { cx: posx, cy: posy, r: this.props.markerRadius, pointerEvents: \"none\", style: this.props.style.marker }));\r\n            label = (React.createElement(\"text\", { x: posx, y: posy, dx: dx, dy: dy, style: tstyle }, this.props.markerLabel));\r\n            return (React.createElement(\"g\", null,\r\n                dot,\r\n                label));\r\n        }\r\n        else {\r\n            if (posx + 10 + w < this.props.width * 3 / 4) {\r\n                if (info) {\r\n                    verticalStem = (React.createElement(\"line\", { pointerEvents: \"none\", style: this.props.style.stem, x1: -10, y1: lineBottom, x2: -10, y2: 20 }));\r\n                    horizontalStem = (React.createElement(\"line\", { pointerEvents: \"none\", style: this.props.style.stem, x1: -10, y1: 20, x2: -2, y2: 20 }));\r\n                }\r\n                dot = (React.createElement(\"circle\", { cx: -10, cy: lineBottom, r: this.props.markerRadius, pointerEvents: \"none\", style: this.props.style.marker }));\r\n                transform = \"translate(\" + (posx + 10) + \",\" + 10 + \")\";\r\n            }\r\n            else {\r\n                if (info) {\r\n                    verticalStem = (React.createElement(\"line\", { pointerEvents: \"none\", style: this.props.style.stem, x1: w + 10, y1: lineBottom, x2: w + 10, y2: 20 }));\r\n                    horizontalStem = (React.createElement(\"line\", { pointerEvents: \"none\", style: this.props.style.stem, x1: w + 10, y1: 20, x2: w + 2, y2: 20 }));\r\n                }\r\n                dot = (React.createElement(\"circle\", { cx: w + 10, cy: lineBottom, r: this.props.markerRadius, pointerEvents: \"none\", style: this.props.style.marker }));\r\n                transform = \"translate(\" + (posx - w - 10) + \",\" + 10 + \")\";\r\n            }\r\n            return (React.createElement(\"g\", { transform: transform },\r\n                verticalStem,\r\n                horizontalStem,\r\n                dot,\r\n                this.renderTime(event),\r\n                React.createElement(\"g\", { transform: \"translate(0,\" + 20 + \")\" }, infoBox)));\r\n        }\r\n    };\r\n    EventMarker.prototype.render = function () {\r\n        var _a = this.props, event = _a.event, column = _a.column, info = _a.info;\r\n        if (!event) {\r\n            return React.createElement(\"g\", null);\r\n        }\r\n        return React.createElement(\"g\", null, this.renderMarker(event, column, info));\r\n    };\r\n    EventMarker.defaultProps = {\r\n        type: \"flag\",\r\n        column: \"value\",\r\n        style: defaultStyle,\r\n        markerRadius: 2,\r\n        markerLabelAlign: \"left\",\r\n        offsetX: 0,\r\n        offsetY: 0\r\n    };\r\n    return EventMarker;\r\n}(React.Component));\r\nexport { EventMarker };\r\n","map":{"mappings":""},"dts":{"name":"/Users/pmurphy/code/react-timeseries-charts/packages/react-timeseries-charts/EventMarker.d.ts","text":"/// <reference types=\"react\" />\r\nimport * as React from \"react\";\r\nimport { Event, Key } from \"pondjs\";\r\nimport { ChartProps } from \"./charts\";\r\nimport { EventMarkerStyle } from \"./style\";\r\nimport { LabelValueList } from \"./types\";\r\nexport declare type EventMarkerProps = ChartProps & {\r\n    event: Event<Key>;\r\n    column?: string;\r\n    type?: \"point\" | \"flag\";\r\n    info?: LabelValueList | string;\r\n    style?: EventMarkerStyle;\r\n    infoWidth?: number;\r\n    infoHeight?: number;\r\n    infoTimeFormat?: ((date: Date) => string) | string;\r\n    markerLabel?: string;\r\n    markerLabelAlign?: \"left\" | \"right\" | \"top\" | \"bottom\";\r\n    markerRadius?: number;\r\n    yValueFunc?: (...args: any[]) => any;\r\n    offsetX?: number;\r\n    offsetY?: number;\r\n};\r\nexport declare class EventMarker extends React.Component<EventMarkerProps> {\r\n    static defaultProps: Partial<EventMarkerProps>;\r\n    renderTime(event: Event<Key>): JSX.Element;\r\n    renderMarker(event: Event<Key>, column: string, info: string | LabelValueList): JSX.Element;\r\n    render(): JSX.Element;\r\n}\r\n"}}
