{"code":"import * as _ from \"lodash\";\r\nvar ScaleInterpolator = (function () {\r\n    function ScaleInterpolator(transition, ease, callback) {\r\n        this.ease = ease;\r\n        this.transitionTime = transition;\r\n        this.callback = callback;\r\n        this.sourceScale = null;\r\n        this.targetScale = null;\r\n        this.cachedScaler = null;\r\n        this.cacheKey = null;\r\n    }\r\n    ScaleInterpolator.prototype.update = function () {\r\n        var _this = this;\r\n        var animationTime = 0;\r\n        if (!this.initialTimestamp) {\r\n            this.initialTimestamp = window.performance.now();\r\n        }\r\n        else {\r\n            animationTime = window.performance.now() - this.initialTimestamp;\r\n        }\r\n        var animationPosition = this.transitionTime\r\n            ? Math.min(animationTime / this.transitionTime, 1.0)\r\n            : 1.0;\r\n        if (!this.targetScale) {\r\n            return;\r\n        }\r\n        if (this.callback) {\r\n            var func1_1 = this.sourceScale;\r\n            var func2_1 = this.targetScale;\r\n            var te_1 = this.ease(animationPosition);\r\n            var scaler = function (x) {\r\n                var a = func1_1(x);\r\n                var b = func2_1(x);\r\n                return a + (b - a) * te_1;\r\n            };\r\n            this.callback(scaler);\r\n        }\r\n        if (animationPosition < 1.0) {\r\n            setTimeout(function () { return _this.update(); }, 20);\r\n        }\r\n        else {\r\n            this.sourceScale = this.targetScale;\r\n            this.targetScale = null;\r\n            this.initialTimestamp = null;\r\n        }\r\n    };\r\n    ScaleInterpolator.prototype.setScale = function (key, scale) {\r\n        var _this = this;\r\n        if (!this.sourceScale) {\r\n            this.sourceScale = scale;\r\n            return;\r\n        }\r\n        if (key !== this.cacheKey) {\r\n            this.targetScale = scale;\r\n            this.cachedScaler = null;\r\n            this.initialTimestamp = null;\r\n            setTimeout(function () { return _this.update(); }, 0);\r\n        }\r\n        this.cacheKey = key;\r\n    };\r\n    ScaleInterpolator.prototype.scaler = function () {\r\n        var _this = this;\r\n        if (_.isNull(this.cachedScaler)) {\r\n            this.cachedScaler = function (v) { return _this.sourceScale(v); };\r\n        }\r\n        return this.cachedScaler;\r\n    };\r\n    ScaleInterpolator.prototype.latestScale = function () {\r\n        return this.targetScale ? this.targetScale : this.sourceScale;\r\n    };\r\n    ScaleInterpolator.prototype.transition = function () {\r\n        return this.transitionTime;\r\n    };\r\n    return ScaleInterpolator;\r\n}());\r\nexport default ScaleInterpolator;\r\n","map":{"mappings":""},"dts":{"name":"/Users/pmurphy/code/react-timeseries-charts/packages/react-timeseries-charts/interpolators.d.ts","text":"import { Scale } from \"./Charts\";\r\nexport declare type ScalerFunction = (v: number) => number;\r\nexport declare type AnimationCallback = (f: ScalerFunction) => any;\r\nexport default class ScaleInterpolator {\r\n    private initialTimestamp;\r\n    private cacheKey;\r\n    private cachedScaler;\r\n    private targetScale;\r\n    private sourceScale;\r\n    private callback;\r\n    private transitionTime;\r\n    private ease;\r\n    constructor(transition: number, ease: (x: number) => number, callback: AnimationCallback);\r\n    update(): void;\r\n    setScale(key: string, scale: Scale): void;\r\n    scaler(): (v: number) => number;\r\n    latestScale(): Scale;\r\n    transition(): number;\r\n}\r\n"}}
