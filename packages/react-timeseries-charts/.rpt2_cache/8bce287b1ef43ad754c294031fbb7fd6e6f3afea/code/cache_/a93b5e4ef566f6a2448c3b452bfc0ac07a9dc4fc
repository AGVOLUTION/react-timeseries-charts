{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from \"react\";\r\nimport { format } from \"d3-format\";\r\nimport { ValueList } from \"./ValueList\";\r\nvar LabelAxis = (function (_super) {\r\n    tslib_1.__extends(LabelAxis, _super);\r\n    function LabelAxis() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    LabelAxis.prototype.renderAxis = function () {\r\n        var valueWidth = this.props.valWidth;\r\n        var rectWidth = this.props.width - valueWidth;\r\n        var style = {\r\n            fontSize: 11,\r\n            textAnchor: \"left\",\r\n            fill: \"#bdbdbd\"\r\n        };\r\n        if (this.props.hideScale) {\r\n            return React.createElement(\"g\", null);\r\n        }\r\n        var valXPos = rectWidth + 3;\r\n        var fmt = this.props.format;\r\n        var maxStr = format(fmt)(this.props.max);\r\n        var minStr = format(fmt)(this.props.min);\r\n        return (React.createElement(\"g\", null,\r\n            React.createElement(\"text\", { x: valXPos, y: 0, dy: \"1.2em\", style: style }, maxStr),\r\n            React.createElement(\"text\", { x: valXPos, y: this.props.height, style: style }, minStr)));\r\n    };\r\n    LabelAxis.prototype.render = function () {\r\n        var textStyle = {\r\n            fontSize: 12,\r\n            textAnchor: \"middle\",\r\n            fill: \"#838383\"\r\n        };\r\n        var valueWidth = this.props.valWidth;\r\n        var rectWidth = this.props.width - valueWidth;\r\n        var valueList = null;\r\n        var labelYPos;\r\n        if (this.props.values) {\r\n            labelYPos = Math.max(Math.round(this.props.height / 4), 10);\r\n            var style = {\r\n                text: textStyle,\r\n                box: {\r\n                    fill: \"none\",\r\n                    stroke: \"none\"\r\n                }\r\n            };\r\n            valueList = React.createElement(ValueList, { style: style, values: this.props.values, width: rectWidth });\r\n        }\r\n        else {\r\n            labelYPos = Math.round(this.props.height / 2);\r\n        }\r\n        return (React.createElement(\"g\", null,\r\n            React.createElement(\"rect\", { x: \"0\", y: \"0\", width: rectWidth, height: this.props.height, style: { fill: \"none\", stroke: \"none\" } }),\r\n            React.createElement(\"text\", { x: Math.round(rectWidth / 2), y: labelYPos, style: textStyle }, this.props.label),\r\n            React.createElement(\"g\", { transform: \"translate(0,\" + (labelYPos + 2) + \")\" }, valueList),\r\n            this.renderAxis()));\r\n    };\r\n    LabelAxis.defaultProps = {\r\n        hideScale: false,\r\n        values: [],\r\n        valWidth: 40,\r\n        format: \".2f\"\r\n    };\r\n    return LabelAxis;\r\n}(React.Component));\r\nexport { LabelAxis };\r\n","map":{"mappings":""},"dts":{"name":"/Users/pmurphy/code/react-timeseries-charts/packages/react-timeseries-charts/LabelAxis.d.ts","text":"/// <reference types=\"react\" />\r\nimport * as React from \"react\";\r\nexport declare type LabelAxisProps = {\r\n    label: string;\r\n    hideScale?: boolean;\r\n    values: {\r\n        label?: string;\r\n        value?: number | string;\r\n    }[];\r\n    valWidth?: number;\r\n    max: number;\r\n    min: number;\r\n    format?: string;\r\n    width?: number;\r\n    height?: number;\r\n};\r\nexport declare class LabelAxis extends React.Component<LabelAxisProps> {\r\n    static defaultProps: Partial<LabelAxisProps>;\r\n    renderAxis(): JSX.Element;\r\n    render(): JSX.Element;\r\n}\r\n"}}
