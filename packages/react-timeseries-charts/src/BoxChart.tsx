/**
 *  Copyright (c) 2015-present, The Regents of the University of California,
 *  through Lawrence Berkeley National Laboratory (subject to receipt
 *  of any required approvals from the U.S. Dept. of Energy).
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree.
 */
import * as _ from "lodash";
import * as Immutable from "immutable";
import * as React from "react";

import {
    Event,
    Key,
    Index,
    indexedEvent,
    max,
    median,
    min,
    percentile,
    Time,
    TimeSeries,
    duration,
    window,
    Window
} from "pondjs";

import { ChartProps } from "./Charts";
import { EventMarker, EventMarkerProps } from "./EventMarker";
import { LabelValueList } from "./types";
import { Styler } from "./styler";
import { scaleAsString } from "./util";

import {
    BoxChartStyle,
    BoxChartChannelStyle as ChannelStyle,
    LevelStyle,
    defaultBoxChartStyle as defaultStyle,
    EventMarkerStyle
} from "./style";

import { ReducerFunction } from "pondjs/lib/types";
import { CSSProperties } from "react";

/**
 * A structure the user can pass into this Chart to automatically build the
 * box ranges using Pond's fixedWindowRollup function.
 */
export type AggregationSpec = {
    size: Window;
    reducers: {
        outer?: [ReducerFunction, ReducerFunction];
        inner?: [ReducerFunction, ReducerFunction];
        center?: ReducerFunction;
    };
};

/**
 * The default version of the AggregationSpec, which will result in a classic
 * BoxPlot with outer box being min to max, inner box being the 25th and 75th
 * percentiles, and a marker at the center for the medium.
 */
const defaultAggregation: AggregationSpec = {
    size: window(duration("5m")),
    reducers: {
        outer: [min(), max()],
        inner: [percentile(25), percentile(75)],
        center: median()
    }
};

/**
 * Defines a structure that will hold the actual ranges to be plotted, whether they
 * come from the chart itself doing the aggregation or are supplied pre-baked from
 * the user.
 */
export type BoxChartRanges = {
    center: number;
    innerMin: number;
    innerMax: number;
    outerMin: number;
    outerMax: number;
};

/**
 * Remaps a `TimeSeries<Index>` which is assumed to have an array of between 1 and 5 values
 * at the `column` specified to a a new TimeSeries<Index>, where each Index is associated with
 * a structure containing outer and inner ranges along with center.
 *
 * The input `TimeSeries` is the format the user should supply to the series if they want
 * to pre-bake the ranges. The output `TimeSeries` is the format actually plotted. If the
 * chart itself does the aggregation then this same output format will be generated by the
 * function `getAggregatedSeries()` below.
 */
function getSeries(series: TimeSeries<Index>, column: string): TimeSeries<Index> {
    return series.map(e => {
        const v = e.get(column);
        const d: BoxChartRanges = {
            center: null,
            innerMin: null,
            innerMax: null,
            outerMin: null,
            outerMax: null
        };
        switch (v.length) {
            case 1:
                d.center = v[0];
                break;
            case 2:
                d.innerMin = v[0];
                d.innerMax = v[1];
                break;
            case 3:
                d.innerMin = v[0];
                d.center = v[1];
                d.innerMax = v[2];
                break;
            case 4:
                d.outerMin = v[0];
                d.innerMin = v[1];
                d.innerMax = v[2];
                d.outerMax = v[3];
                break;
            case 5:
                d.outerMin = v[0];
                d.innerMin = v[1];
                d.center = v[2];
                d.innerMax = v[3];
                d.outerMax = v[4];
                break;
            default:
                console.error("Tried to make boxchart from invalid array");
        }
        return indexedEvent(e.index(), Immutable.Map(d));
    });
}

/**
 * Takes in a TimeSeries and an AggregationSpec and builds a new TimeSeries<Index>
 * which will be rendered by the chart. The `AggregationSpec` is a combination of
 * the windowing size to use (e.g. 5 minutes) and the reducer functions used to
 * build the inner and outer ranges, along with the center. For example:
 * ```
 * {
 *    size: window(duration("5m")),
 *    reducers: {
 *        outer: [min(), max()],
 *        inner: [percentile(25), percentile(75)],
 *        center: median()
 *    }
 * }
 * ```
 */
function getAggregatedSeries(
    series: TimeSeries<Key>,
    column: string,
    aggregation: AggregationSpec = defaultAggregation
): TimeSeries<Index> {
    const { size, reducers } = aggregation;
    const { inner, outer, center } = reducers;

    type FixedWindowAggregation = {
        center: [string, ReducerFunction];
        innerMin: [string, ReducerFunction];
        innerMax: [string, ReducerFunction];
        outerMin: [string, ReducerFunction];
        outerMax: [string, ReducerFunction];
    };

    const d: Partial<FixedWindowAggregation> = {};

    if (inner) {
        d.innerMin = [column, inner[0]];
        d.innerMax = [column, inner[1]];
    }
    if (outer) {
        d.outerMin = [column, outer[0]];
        d.outerMax = [column, outer[1]];
    }
    if (center) {
        d.center = [column, center];
    }

    return series.fixedWindowRollup({
        window: size,
        aggregation: d
    });
}

export type BoxChartProps = ChartProps & {
    series?: TimeSeries<Index> | TimeSeries<Time>;
    column?: string;
    aggregation?: AggregationSpec;
    style?: BoxChartStyle | ((channel: string) => ChannelStyle) | Styler;
    info?: LabelValueList | string;
    infoStyle?: EventMarkerStyle;
    infoTimeFormat?: ((date: Date) => string) | string;
    infoWidth?: number;
    infoHeight?: number;
    infoMarkerRadius?: number;
    innerSpacing?: number;
    outerSpacing?: number;
    innerSize?: number;
    outerSize?: number;
    selected?: Event<Index>;
    highlighted?: Event<Index>;
    onSelectionChange?: (e: Event<Index>) => any;
    onHighlightChange?: (e: Event<Index>) => any;
};

/**
 * Renders a boxplot chart.
 *
 * The TimeSeries supplied to the boxplot, as the `series` prop can be one of two types:
 *
 *  1) It can be a TimeSeries containing IndexedEvents or TimeRangeEvents.
 *     In this case a `column` prop should be supplied to specify the
 *     data column containing the dimensions of the boxes. This props
 *     should be an array of size 1 to 5 elements. e.g. [12, 18, 22, 28]. The
 *     numbers should be ordered, lowest to greatest.
 *
 *  2) A TimeSeries containing timestamp based Events. In this case the
 *     boxplot will be aggregated for you. To control the aggregation you can supply
 *     an `aggregation` prop: a structure to specify the window size and
 *     reducers used to determine the boxes.
 *
 * In both cases you are generating up to two ranges and a center marker. In the
 * first case you are defining this based on the array of numbers. The outer numbers
 * specify the outerRange, the inner numbers specify the innerRange and the middle
 * number specifies the center marker. In the second case you are building those ranges
 * from denser data, specifying a window and aggregation functions to build each
 * of the ranges and center maker.
 *
 * In both cases you do not need to supply all the values. For example if you
 * provide an array of 2 elements, that would define a single range, with no outer range
 * and no center marker. The BoxChart is pretty flexible in that way, so you
 * can use it in many situations.
 *
 * Here is an example of using it to display temperature ranges. The series
 * passed to this code would be a TimeSeries containing IndexedEvents. For
 * each event, the column `temp` contains an array of values used for the
 * box plot ranges:
 *
 * ```
 *     <BoxChart
 *       axis="temperatureAxis"
 *       style={style}
 *       column="temp"
 *       series={series} />
 * ```
 *
 * While here is an example with a dense TimeSeries of Events supplied,
 * along with an aggregation specification. This code would produce an
 * outer range from the 5th percentile to the 95th, along with an inner
 * range for the interquantile, and a center marker at the median:
 *
 * ```
 *    <BoxChart
 *      axis="speedaxis"
 *      series={speed}
 *      column="speed"
 *      style={style}
 *      aggregation={{
 *        size: this.state.rollup,
 *        reducers: {
 *          outer: [percentile(5), percentile(95)],
 *          inner: [percentile(25), percentile(75)],
 *          center: median(),
 *        },
 *      }}
 *    />
 * ```
 *
 * The BoxChart supports Info boxes, highlighting and selection.
 *
 * Note: selection and highlighting is on the whole event, not individual ranges.
 * Also note that since the box chart builds an internal TimeSeries for performance
 * reasons, selection will give you and IndexedEvent, but it won't be the same
 * IndexedEvent in your `series`. Similarly if you are using the aggregation
 * specification you will get events for the rollup, not your original data.
 */
export class BoxChart extends React.Component<BoxChartProps> {
    static defaultProps = {
        column: "value",
        innerSpacing: 1.0,
        outerSpacing: 2.0,
        infoStyle: {
            stroke: "#999",
            fill: "white",
            opacity: 0.9,
            pointerEvents: "none"
        },
        stemStyle: {
            stroke: "#999",
            cursor: "crosshair",
            pointerEvents: "none"
        },
        markerStyle: {
            fill: "#999"
        },
        infoMarkerRadius: 2,
        infoWidth: 90,
        infoHeight: 30
    };

    // Cached series
    series: TimeSeries<Index>;

    // Cached styles
    providedStyle: any;
    selectedStyle: any;
    highlightedStyle: any;
    mutedStyle: any;
    normalStyle: any;

    constructor(props: BoxChartProps) {
        super(props);
        this.series = null;
        if (props.series.size() > 0) {
            if (props.series.atFirst().keyType() === "time") {
                const input = props.series as TimeSeries<Time>;
                this.series = getAggregatedSeries(input, props.column, props.aggregation);
            } else {
                const input = props.series as TimeSeries<Index>;
                this.series = getSeries(input, props.column);
            }
        }
    }

    componentWillReceiveProps(nextProps: BoxChartProps) {
        const aggregation = nextProps.aggregation;
        let aggregationChanged = false;
        if (_.isUndefined(aggregation) !== _.isUndefined(this.props.aggregation)) {
            aggregationChanged = true;
        }
        if (aggregation && this.props.aggregation) {
            if (aggregation.size !== this.props.aggregation.size) {
                aggregationChanged = true;
            }
        }
        if (aggregationChanged) {
            this.series = getAggregatedSeries(
                nextProps.series,
                nextProps.column,
                nextProps.aggregation
            );
        }
    }

    shouldComponentUpdate(nextProps: BoxChartProps): boolean {
        const newSeries = nextProps.series;
        const oldSeries = this.props.series;
        const width = nextProps.width;
        const timeScale = nextProps.timeScale;
        const yScale = nextProps.yScale;
        const column = nextProps.column;
        const style = nextProps.style;
        const aggregation = nextProps.aggregation;
        const highlighted = nextProps.highlighted;
        const selected = nextProps.selected;
        const widthChanged = this.props.width !== width;
        const timeScaleChanged = scaleAsString(this.props.timeScale) !== scaleAsString(timeScale);
        const yAxisScaleChanged = this.props.yScale !== yScale;
        const columnChanged = this.props.column !== column;
        const styleChanged = JSON.stringify(this.props.style) !== JSON.stringify(style);
        const highlightedChanged = this.props.highlighted !== highlighted;
        const selectedChanged = this.props.selected !== selected;
        let aggregationChanged = false;
        if (_.isUndefined(aggregation) !== _.isUndefined(this.props.aggregation)) {
            aggregationChanged = true;
        }
        if (aggregation && this.props.aggregation) {
            if (aggregation.size !== this.props.aggregation.size) {
                aggregationChanged = true;
            }
        }
        let seriesChanged = false;
        if (oldSeries.size() !== newSeries.size()) {
            seriesChanged = true;
        } else {
            seriesChanged = !TimeSeries.is(oldSeries, newSeries);
        }
        // If the series changes we need to rebuild this.series with
        // the incoming props
        if (seriesChanged) {
            if (nextProps.series.size() > 0) {
                if (nextProps.series.atFirst().keyType() === "time") {
                    const input = nextProps.series as TimeSeries<Time>;
                    this.series = getAggregatedSeries(
                        input,
                        nextProps.column,
                        nextProps.aggregation
                    );
                } else {
                    const input = nextProps.series as TimeSeries<Index>;
                    this.series = getSeries(
                        nextProps.series as TimeSeries<Index>,
                        nextProps.column
                    );
                }
            }
        }
        return (
            seriesChanged ||
            timeScaleChanged ||
            widthChanged ||
            columnChanged ||
            styleChanged ||
            yAxisScaleChanged ||
            aggregationChanged ||
            highlightedChanged ||
            selectedChanged
        );
    }

    handleHover(e: React.MouseEvent<SVGElement>, event: Event<Index>) {
        if (this.props.onHighlightChange) {
            this.props.onHighlightChange(event);
        }
    }

    handleHoverLeave() {
        if (this.props.onHighlightChange) {
            this.props.onHighlightChange(null);
        }
    }

    handleClick(e: React.MouseEvent<SVGElement>, event: Event<Index>) {
        if (this.props.onSelectionChange) {
            this.props.onSelectionChange(event);
        }
        e.stopPropagation();
    }

    /**
     * Given a `column`, look up the ChannelStyle.
     */
    providedStyleArray(column: string): LevelStyle[] {
        let levelStyles: LevelStyle[] = defaultStyle;
        if (this.props.style) {
            if (this.props.style instanceof Styler) {
                levelStyles = this.props.style.boxChartStyle()[column];
            } else if (_.isFunction(this.props.style)) {
                levelStyles = this.props.style(column);
            } else if (_.isObject(this.props.style)) {
                levelStyles = this.props.style[column];
            }
        }
        return levelStyles;
    }

    /**
     * Returns the style of a specific column, at a specific level taking into
     * account the mode of the Event (selected, highlighted etc). This is the
     * style used for drawing the box itself.
     */
    style(column: string, event: Event<Index>, level: number): LevelStyle {
        let style: LevelStyle;

        if (!this.providedStyle) {
            this.providedStyle = this.providedStyleArray(this.props.column);
        }
        if (
            !_.isNull(this.providedStyle) &&
            (!_.isArray(this.providedStyle) || this.providedStyle.length !== 3)
        ) {
            console.warn("Provided style to BoxChart should be an array of 3 objects");
            return defaultStyle[level];
        }

        // Is the event highlighted or selected?
        const isHighlighted = this.props.highlighted && Event.is(this.props.highlighted, event);
        const isSelected = this.props.selected && Event.is(this.props.selected, event);

        if (this.props.selected) {
            if (isSelected) {
                if (!this.selectedStyle || !this.selectedStyle[level]) {
                    if (!this.selectedStyle) {
                        this.selectedStyle = [];
                    }
                    this.selectedStyle[level] = _.merge(
                        defaultStyle[level].selected,
                        this.providedStyle[level].selected ? this.providedStyle[level].selected : {}
                    );
                }
                style = this.selectedStyle[level];
            } else if (isHighlighted) {
                if (!this.highlightedStyle || !this.highlightedStyle[level]) {
                    if (!this.highlightedStyle) {
                        this.highlightedStyle = [];
                    }
                    this.highlightedStyle[level] = _.merge(
                        defaultStyle[level].highlighted,
                        this.providedStyle[level].highlighted
                            ? this.providedStyle[level].highlighted
                            : {}
                    );
                }
                style = this.highlightedStyle[level];
            } else {
                if (!this.mutedStyle) {
                    this.mutedStyle = [];
                }
                if (!this.mutedStyle[level]) {
                    this.mutedStyle[level] = _.merge(
                        defaultStyle[level].muted,
                        this.providedStyle[level].muted ? this.providedStyle[level].muted : {}
                    );
                }
                style = this.mutedStyle[level];
            }
        } else if (isHighlighted) {
            style = _.merge(
                defaultStyle[level].highlighted,
                this.providedStyle[level].highlighted ? this.providedStyle[level].highlighted : {}
            );
        } else {
            if (!this.normalStyle) {
                this.normalStyle = [];
            }
            if (!this.normalStyle[level]) {
                this.normalStyle[level] = _.merge(
                    defaultStyle[level].normal,
                    this.providedStyle[level].normal ? this.providedStyle[level].normal : {}
                );
            }
            style = this.normalStyle[level];
        }
        return style;
    }

    renderBars() {
        const { timeScale, yScale, column } = this.props;

        const innerSpacing = +this.props.innerSpacing;
        const outerSpacing = +this.props.outerSpacing;
        const innerSize = +this.props.innerSize;
        const outerSize = +this.props.outerSize;
        const bars: JSX.Element[] = [];
        let eventMarker;

        const events = this.series.collection().eventList();
        events.forEach(event => {
            const index = event.index();
            const begin = event.begin();
            const end = event.end();
            const d = event.getData();

            const beginPosInner = timeScale(begin) + innerSpacing;
            const endPosInner = timeScale(end) - innerSpacing;
            const beginPosOuter = timeScale(begin) + outerSpacing;
            const endPosOuter = timeScale(end) - outerSpacing;

            let innerWidth = innerSize || endPosInner - beginPosInner;
            if (innerWidth < 1) {
                innerWidth = 1;
            }
            let outerWidth = outerSize || endPosOuter - beginPosOuter;
            if (outerWidth < 1) {
                outerWidth = 1;
            }

            const c = timeScale(begin) + (timeScale(end) - timeScale(begin)) / 2;
            let xInner = timeScale(begin) + innerSpacing;
            if (innerSize) {
                xInner = c - innerSize / 2;
            }
            let xOuter = timeScale(begin) + outerSpacing;
            if (outerSize) {
                xOuter = c - outerSize / 2;
            }

            const styles = [];
            styles[0] = this.style(column, event, 0);
            styles[1] = this.style(column, event, 1);
            styles[2] = this.style(column, event, 2);
            const innerMin = d.has("innerMin") ? yScale(event.get("innerMin")) : null;
            const innerMax = d.has("innerMax") ? yScale(event.get("innerMax")) : null;
            const outerMin = d.has("outerMin") ? yScale(event.get("outerMin")) : null;
            const outerMax = d.has("outerMax") ? yScale(event.get("outerMax")) : null;
            const center = d.has("center") ? yScale(event.get("center")) : null;
            let hasInner = true;
            let hasOuter = true;
            let hasCenter = true;
            if (_.isNull(innerMin) || _.isNull(innerMax)) {
                hasInner = false;
            }
            if (_.isNull(outerMin) || _.isNull(outerMax)) {
                hasOuter = false;
            }
            if (_.isNull(center)) {
                hasCenter = false;
            }
            let ymax: string = null;
            if (hasOuter) {
                let level = 0;
                if (!hasInner) {
                    level += 1;
                }
                if (!hasCenter) {
                    level += 1;
                }
                const keyOuter = `${this.series.name()}-${index}-outer`;
                const boxOuter = {
                    x: xOuter,
                    y: outerMax,
                    width: outerWidth,
                    height: outerMin - outerMax,
                    rx: 2,
                    ry: 2
                };
                const barOuterProps: any = {
                    key: keyOuter,
                    style: styles[level],
                    ...boxOuter
                };
                if (this.props.onSelectionChange) {
                    barOuterProps.onClick = (e: React.MouseEvent<SVGElement>) =>
                        this.handleClick(e, event);
                }
                if (this.props.onHighlightChange) {
                    barOuterProps.onMouseMove = (e: React.MouseEvent<SVGElement>) =>
                        this.handleHover(e, event);
                    barOuterProps.onMouseLeave = () => this.handleHoverLeave();
                }
                bars.push(<rect {...barOuterProps} />);
                ymax = "outerMax";
            }
            if (hasInner) {
                let level = 1;
                if (!hasCenter) {
                    level += 1;
                }
                const keyInner = `${this.series.name()}-${index}-inner`;
                const boxInner = {
                    x: xInner,
                    y: innerMax,
                    width: innerWidth,
                    height: innerMin - innerMax,
                    rx: 1,
                    ry: 1
                };
                const barInnerProps: any = {
                    key: keyInner,
                    ...boxInner,
                    style: styles[level]
                };
                if (this.props.onSelectionChange) {
                    barInnerProps.onClick = (e: React.MouseEvent<SVGElement>) =>
                        this.handleClick(e, event);
                }
                if (this.props.onHighlightChange) {
                    barInnerProps.onMouseMove = (e: React.MouseEvent<SVGElement>) =>
                        this.handleHover(e, event);
                    barInnerProps.onMouseLeave = () => this.handleHoverLeave();
                }
                bars.push(<rect {...barInnerProps} />);
                ymax = ymax || "innerMax";
            }
            if (hasCenter) {
                const level = 2;
                const keyCenter = `${this.series.name()}-${index}-center`;
                const boxCenter = {
                    x: xInner,
                    y: center,
                    width: innerWidth,
                    height: 1
                };
                const barCenterProps: any = {
                    key: keyCenter,
                    ...boxCenter,
                    style: styles[level]
                };
                if (this.props.onSelectionChange) {
                    barCenterProps.onClick = (e: React.MouseEvent<SVGElement>) =>
                        this.handleClick(e, event);
                }
                if (this.props.onHighlightChange) {
                    barCenterProps.onMouseMove = (e: React.MouseEvent<SVGElement>) =>
                        this.handleHover(e, event);
                    barCenterProps.onMouseLeave = () => this.handleHoverLeave();
                }
                bars.push(<rect {...barCenterProps} />);
                ymax = ymax || "center";
            }
            // Event marker if info provided and hovering
            const isHighlighted = this.props.highlighted && Event.is(this.props.highlighted, event);
            if (isHighlighted && this.props.info) {
                const eventMarkerProps: EventMarkerProps = {
                    key: `marker-${index}`,
                    event,
                    column,
                    type: "point",
                    info: this.props.info,
                    style: this.props.infoStyle,
                    yValueFunc: e => e.get(ymax),
                    width: this.props.width,
                    height: this.props.height,
                    infoWidth: this.props.infoWidth,
                    infoHeight: this.props.infoWidth,
                    infoTimeFormat: this.props.infoTimeFormat,
                    markerRadius: this.props.infoMarkerRadius
                };
                eventMarker = <EventMarker {...eventMarkerProps} />;
            }
        });
        return (
            <g>
                {bars}
                {eventMarker}
            </g>
        );
    }
    render() {
        return <g>{this.renderBars()}</g>;
    }
}
